$END_LIB
TEXT
AlObject
class Perform
class PerformHTTPClient
end_class
end_class
$END_CLASS
TEXT
AlObject
class Perform
class PerformHTTPClient
member
public: static void main();
member
public: static void create_file();
member
public: integer repeat;
member
public: static list debug;
member
public: static PerformHTTPClient client;
member
public: void SetURLs();
member
public: integer port;
member
public: void Init();
member
public: list Start();
member
public: integer seq;
member
public: list out;
member
public: file out_file;
member
public: string file_path;
member
public: integer state;
member
public: integer content_length;
member
public: integer content_read_length;
member
public: list URLs;
member
public: string URL;
member
public: string request;
member
public: string server;
member
public: string path;
member
public: void Close(string err);
member
public: integer hwnd;
member
public: integer wnd_msg;
member
public: integer s_id;
member
public: integer buffer_size;
member
public: list buffer;
member
public: list Receive();
member
public: list Receive2(integer size);
member
public: void Received();
member
public: integer read_bytes;
member
public: string recv_msg;
member
public: list Send(string msg);
member
public: void Report();
end_class
end_class
$END_MEMBER
TEXT
AlObject
class Perform
class PerformHTTPClient
member
public: static void main();
body
{
	// debug = null;
	debug = 1;
	client = new PerformHTTPClient;
	client.repeat = 3;
	client.SetURLs();
	client.Start();
}
end_body
member
public: static void create_file();
body
{
	debug = null;
	// debug = 1;
	client = new PerformHTTPClient;
	client.repeat = 1;
	client.out = 1;
	client.file_path = "D:/Temp";
	client.SetURLs();
	client.Start();
}
end_body
member
public: integer repeat;
member
public: static list debug;
member
public: static PerformHTTPClient client;
member
public: void SetURLs();
body
{
	seq = 1;
	var list ls;
	ls = al_cons(null, null);
	al_create_arc(ls, al_copy("https://pluto/"), null);
	al_create_arc(ls, al_copy("https://pluto/altair/altair.html"), null);
	al_create_arc(ls, al_copy("https://pluto/altair/diff.html"), null);
	URLs = ls;
	URL = al_dst_node(ls, null);
	port = 443;
}
end_body
member
public: integer port;
member
public: void Init();
body
{
	var list ls, itr;
	var string name;
	ls = al_str_misc("split", URL, '/');
	itr = al_dst_itr(ls);
	server = al_next(itr);
	server = al_next(itr);
	server = al_next(itr);
	if (debug) {
		al_print("server = " + server + "\n");
	} else {
	}
	path = "/";
	loop {
		if (name = al_next(itr)) {
		} else {
			break;
		}
		if (path == "/") {
			path = "/" + name;
		} else {
			path = path + "/" + name;
		}
	}
	request = "GET " + path + " HTTP/1.1\n";
	request = request + "Accept: image/gif, image/x-xbitmap, image/jpeg, image/pjpeg, application/vnd.ms-excel, application/msword, application/vnd.ms-powerpoint, */*\n";
	request = request + "Accept-Language: ja\n";
	request = request + "Accept-Encoding: gzip, deflate\n";
	request = request + "User-Agent: Mozilla/4.0 (compatible; MSIE 4.01; Windows NT)\n";
	request = request + "Host: splpe770\n";
	request = request + "Connection: Keep-Alive\n";
	request = request + "\n";
}
end_body
member
public: list Start();
body
{
	al_create_arc(URL, al_misc("time_stamp", null, null), "start");
	if (out) {
		var string filename;
		filename = file_path + "/" + (string)seq + ".html";
		out_file = al_file_open(filename, "wb");
		seq = seq + 1;
	} else {
	}
	Init();
	var string err;
	var integer hostaddr;
	if (hostaddr = al_socket("gethostbyname", server, null, null)) {
	} else {
		err = "fail to gethostbyname.";
		Close(err);
		return 1;
	}
	// --------
	var list files;
	var string cert_file, key_file, ca_cert_file;
	// cert_file = "client/cert.pem";
	// key_file = "client/private/key.pem";
	ca_cert_file = "ca/cert.pem";
	files = al_list4(cert_file, key_file, ca_cert_file, 1);
	if (s_id = al_socket("socket", "SSL", files, null)) {
		if (debug) {
			al_print("create socket: socket_id = " + (string)s_id + "\n");
		} else {
		}
	} else {
		err = "faile to create socket.";
		Close(err);
		return 1;
	}
	if (al_socket("connect", s_id, al_list2(hostaddr, port), null)) {
		err = (string)al_socket("get_last_error", s_id, null, null);
		Close("fail to connect socket.(" + err + ")");
		return 1;
	} else {
	}
	if (al_socket("SSL_connect", s_id, null, null)) {
		err = (string)al_socket("get_last_error", s_id, null, null);
		Close("fail to SSL_connect socket.(" + err + ")");
		return 1;
	} else {
	}
	buffer_size = 4096;
	buffer = al_misc("binary", buffer_size, null);
	hwnd = al_wnd_message(null, "hwnd", null, null);
	wnd_msg = al_wnd_message(null, "register_msg", "RECV", null);
	var list cb;
	cb = al_list3(al_root_class(), this, PerformHTTPClient::Received);
	al_wnd_message(null, "msg_callback", wnd_msg, cb);
	// --------
	content_length = 0;
	state = 0;
	if (err = Receive()) {
		Close(err);
		return 1;
	} else {
	}
	if (err = Send(request)) {
		Close(err);
		return 1;
	} else {
	}
	return null;
}
end_body
member
public: integer seq;
member
public: list out;
member
public: file out_file;
member
public: string file_path;
member
public: integer state;
member
public: integer content_length;
member
public: integer content_read_length;
member
public: list URLs;
member
public: string URL;
member
public: string request;
member
public: string server;
member
public: string path;
member
public: void Close(string err);
body
{
	if (s_id) {
		al_socket("close", s_id, null, null);
		if (debug) {
			al_print("close socket: socket_id = " + (string)s_id + "\n");
		} else {
		}
		s_id = null;
	} else {
	}
	if (wnd_msg) {
		al_wnd_message(null, "msg_callback", wnd_msg, null);
		wnd_msg = null;
	} else {
	}
	if (err != "null") {
		// var file f;
		// al_file_write(f, "string", "[ERROR] " + err + "\n");
		// al_file_manip("flush", f, null);
		// f = null;
		al_print("[ERROR] " + (string)err + "\n");
	} else {
	}
}
end_body
member
public: integer hwnd;
member
public: integer wnd_msg;
member
public: integer s_id;
member
public: integer buffer_size;
member
public: list buffer;
member
public: list Receive();
body
{
	var list buf;
	var string err;
	buf = al_list3(buffer, 0, buffer_size);
	if (al_socket("recv", s_id, buf, al_list3(hwnd, wnd_msg, 1))) {
		err = (string)al_socket("get_last_error", s_id, null, null);
		return "Recv Error(" + err + ")";
	} else {
	}
	return null;
}
end_body
member
public: list Receive2(integer size);
body
{
	var list buf;
	var string err;
	if (size > buffer_size) {
		size = buffer_size;
	} else {
	}
	buf = al_list3(buffer, 0, size);
	if (al_socket("recv", s_id, buf, al_list2(hwnd, wnd_msg))) {
		err = (string)al_socket("get_last_error", s_id, null, null);
		return "Recv Error(" + err + ")";
	} else {
	}
	return null;
}
end_body
member
public: void Received();
body
{
	var string err, req;
	read_bytes = al_wnd_message(null, "lParam", null, null);
	if (read_bytes < 0) {
		err = (string)al_socket("get_last_error", s_id, null, null);
		Close(err);
		return;
	} else {
	}
	// --------
	if (state == 0) {
		req = al_misc("binary_to_string", al_list3(buffer, 0, read_bytes), null);
		if (debug) {
			al_print("req = " + (string)req + "\n");
		} else {
		}
		if (req != "\r") {
			var file f;
			f = al_file_open(req, "sr");
			if (al_file_match_str(f, "Content-Length:")) {
				content_length = al_file_read(f, "integer");
			} else {
			}
			if (err = Receive()) {
				Close(err);
				return;
			} else {
			}
		} else {
			if (content_length == 0) {
				state = 1;
				if (err = Receive()) {
					Close(err);
					return;
				} else {
				}
			} else {
				content_read_length = content_length;
				state = 2;
				if (err = Receive2(content_read_length)) {
					Close(err);
					return;
				} else {
				}
			}
		}
		return;
	} else {
	}
	// --------
	if (state == 1) {
		req = al_misc("binary_to_string", al_list3(buffer, 0, read_bytes), null);
		// al_print("length = " + (string)req + "\n");
		var file f;
		f = al_file_open(req, "sr");
		content_read_length = content_length = al_file_read(f, "hex");
		state = 2;
		if (err = Receive2(content_read_length)) {
			Close(err);
			return;
		} else {
		}
		return;
	} else {
	}
	// --------
	if (state == 2) {
		if (out) {
			al_file_write(out_file, al_list3(buffer, 0, read_bytes), null);
		} else {
		}
		content_read_length = content_read_length - read_bytes;
		if (debug) {
			al_print("content_read_length = " + (string)content_read_length + "\n");
		} else {
		}
		if (content_read_length > 0) {
			if (err = Receive2(content_read_length)) {
				Close(err);
				return;
			} else {
			}
		} else {
			state = 3;
			Close("null");
			if (out) {
				out_file = null;
			} else {
			}
			al_create_arc(URL, al_misc("time_stamp", null, null), "end");
			if (URL = al_next_dst_node(URLs, URL, null)) {
				if (err = Start()) {
					Close(err);
				} else {
				}
			} else {
				repeat = repeat - 1;
				if (repeat == 0) {
					Report();
				} else {
					URL = al_dst_node(URLs, null);
					if (err = Start()) {
						Close(err);
					} else {
					}
				}
			}
		}
		return;
	} else {
	}
	// --------
	Close("unknown state");
}
end_body
member
public: integer read_bytes;
member
public: string recv_msg;
member
public: list Send(string msg);
body
{
	if (msg == null) {
		return "message is null";
	} else {
	}
	msg = al_str_misc("u_to_d", msg, null);
	if (al_socket("send", s_id, msg, null)) {
		var string err;
		err = (string)al_socket("get_last_error", s_id, null, null);
		return "Send Error(" + err + ")";
	} else {
	}
	if (debug) {
		al_print("Send: " + msg);
	} else {
	}
	return null;
}
end_body
member
public: void Report();
body
{
	var list itr, itr2, start, end;
	var string name;
	itr = al_dst_itr(URLs);
	loop {
		if (name = al_next(itr)) {
		} else {
			break;
		}
		al_print("URL = " + name + "\n");
		itr2 = al_dst_itr(name);
		loop {
			if (start = al_next_a(itr2, "start")) {
			} else {
				break;
			}
			end = al_next_a(itr2, "end");
			al_print("\ttime = " + (string)(end - start) + "\n");
		}
	}
}
end_body
end_class
end_class
$END_BODY
