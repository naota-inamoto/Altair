
split_ident ;

indent+ "    " "{" ;
-indent "}" ;
post newline indent "{" ;
post newline indent "}" ;
post newline indent ";" ;

indent+ "    " "case" ;
-indent "case" ;
indent+ "    " "default" ;
-indent "default" ;
post newline indent <switch_case_1:3> ;
post newline indent <switch_case_2:3> ;
post newline indent <switch_default:2> ;

pre  space "{" ;
post space "," ;

pre  space "throws" ;

post space "if" ;
post space <if:4> ;
post space "for" ;
post space <for:7> ;
post space "while" ;
post space <while:4> ;
post space "do" ;
post space "switch" ;

pre  space <var_dcl_var:1> ;
pre  space <var_init:1> ;
post space <var_init:1> ;

pre  space <param:3> ;

pre  space <e_asgn_n:2> ;
post space <e_asgn_n:2> ;
pre  space <e_cond_1:1> ;
post space <e_cond_1:1> ;
pre  space <e_cond_1:3> ;
post space <e_cond_1:3> ;
pre  space <e_oror_n:1> ;
post space <e_oror_n:1> ;
pre  space <e_andand_n:1> ;
post space <e_andand_n:1> ;
pre  space <e_or_n:1> ;
post space <e_or_n:1> ;
pre  space <e_xor_n:1> ;
post space <e_xor_n:1> ;
pre  space <e_and_n:1> ;
post space <e_and_n:1> ;
pre  space <e_eq_1:1> ;
post space <e_eq_1:1> ;
pre  space <e_cmp_1:1> ;
post space <e_cmp_1:1> ;
pre  space <e_sft_n:1> ;
post space <e_sft_n:1> ;
pre  space <e_add_n:1> ;
post space <e_add_n:1> ;
pre  space <e_mul_n:1> ;
post space <e_mul_n:1> ;

<comment_1>  = comment_begin_end     "/*" "*/" ;
<comment_2>  = comment_until_newline "//"      ;

<program> = program { prog_pkg <package> }?
                    { prog_imp <import> }*
                    { prog_if <interface> | prog_cls <class> }* EOF ;

<package> = pkg "package" <dot_name> ";" ;

<import> = imp_cls "import" <dot_name> ";" |
           imp_wcd "import" <dot_name> "." "*" ";" ;

<class> = class { cls_modif <modif> }?
              "class" <ident>
                  { cls_super "extends" <dot_name> }?
                  { cls_impl  "implements" <dot_name> { impl_n "," <dot_name> }* }?
              "{"
                  {
                      cls_init "static" <block_stat>  |
                      cls_var_dcl       <var_dcl>     |
                      cls_constructor   <constructor> |
                      cls_method        <method>      |
                      cls_colon ";"                   |
                      cls_inner_class <class>
                  }*
              "}" ;

<interface> = interface { if_modif <modif> }?
              "interface" <ident>
                  { impl_super "extends" <dot_name> { impl_super_n "," <dot_name> }* }?
              "{"
                  {
                      if_var_dcl       <var_dcl>    |
                      if_method        <method>     |
                      if_colon ";"
                  }*
              "}" ;

<var_dcl>     = var_dcl { var_modif <modif> }? <type> <var_dcl_var> { v_d_v "," <var_dcl_var> }* ";" ;
<var_dcl_var> = var_dcl_var <ident> { var_ary "[" "]" }* { var_init "=" <var_init> }? ;

<var_init>     = var_init_exp <exp> | v_i_ary <var_init_ary> ;
<var_init_ary> = var_init_ary "{" { var_i_ary_1 <var_init> { var_i_ary_n "," <var_init> }* }? { v_i_a_comma "," }? "}" ;

<constructor> = constructor { constructor_modif <modif> }? <ident> "(" { c_p_ls <param_ls> }? ")"
                { constr_excep_1 "throws" <dot_name> { constr_excep_n "," <dot_name> }*  }?
                <block_stat> ;

<method> = method { method_modif <modif> }? <type> <ident> "(" { m_p_ls <param_ls> }? ")"
               { method_excep_1 "throws" <dot_name> { method_excep_n "," <dot_name> }*  }?
               { method_body <block_stat> | method_proto ";" } ;

<param_ls> = param_ls <param> { param_ls_n "," <param> }* ;

<param>    = param <type> { param_ary "[" "]" }* <ident> { param_ary_2 "[" "]" }* ;

<modif> = modif { public       "public"       |
                  protected    "protected"    |
                  private      "private"      |
                  static       "static"       |
                  final        "final"        |
                  abstract     "abstract"     |
                  synchronized "synchronized" |
                  native       "native"
          }+ ;

<block_stat> = block_stat "{" { block_stat_n <stat> }* "}" ;

<stat> = block <block_stat> |
         if "if" "(" <exp> ")" <stat>
         { if_else "else" <stat> }? |
         switch "switch" "(" <exp> ")" "{"
             { switch_case_1  "case" <exp> ":" { sw_case_1_stat  <stat> }* }*
             { switch_default "default"    ":" { sw_default_stat <stat> }* }?
             { switch_case_2  "case" <exp> ":" { sw_case_2_stat  <stat> }* }*
         "}" |
         label <ident> ":" |
         for "for" "("
             { for_init_var <var_dcl> | for_init_exp <exp> ";" | for_no_init ";" } 
             { for_cond <exp> }? ";"
             { for_next <exp>  }?  ")" <stat> |
         while "while" "(" <exp> ")" <stat> |
         do "do" <stat> "while" "(" <exp> ")" ";" |
         continue "continue" { cont_lab <ident> }? ";" |
         break    "break"    { brk_lab  <ident> }? ";" |
         return "return" { ret_exp <exp> }? ";" |
         stat_sync "synchronized" "(" <exp> ")" <stat> |
         try "try" <stat>
             { catch   "catch" "(" <param> ")" <stat> }*
             { finally "finally" <stat> }? |
         throw "throw" <exp> ";" |
         stat_var_dcl <var_dcl> |
         stat_exp <exp> ";" |
         stat_colon ";" |
         extension <jsp_block> ;

<exp> = p_exp <arg> { p_exp_n "," <arg> }* ;

<arg> = exp <e_asgn> ;

<op_asgn> = asgn "=" !'=' | asgn_add "+=" | asgn_sub "-=" |
            asgn_mul "*="  | asgn_div "/=" | asgn_mod "%=" |
            asgn_sr0 ">>>=" | asgn_sr ">>=" | asgn_sl "<<=" |
            asgn_and "&=" | asgn_xor "^=" | asgn_or "|=" ;

<op_eq>  = eq "==" | ne "!=" ;
<op_cmp> = ge ">=" | gt ">" | le "<=" | lt "<" | instanceof "instanceof" ;
<op_sft> = sr0 ">>>" | sr ">>" | sl "<<" ;
<op_add> = add "+" | sub "-" ;
<op_mul> = mul "*" | div "/" | mod "%" !'>' ;
<op_u_left>  = pre_inc  "++" | pre_dec  "--" | plus "+" | minus "-" | bit_not "~" | logic_not "!" ;
<op_u_right> = post_inc "++" | post_dec "--" ;

<e_asgn>   = e_asgn_1 { e_asgn_n <lhs> <op_asgn> }* <e_cond> ;
<e_cond>   = e_cond <e_oror>   { e_cond_1   "?"   <e_cond> ":" <e_cond> }? ;
<e_oror>   = e_oror <e_andand> { e_oror_n   "||"  <e_andand> }* ;
<e_andand> = e_andand <e_or>   { e_andand_n "&&"  <e_or> }* ;
<e_or>     = e_or  <e_xor>     { e_or_n     "|"   <e_xor> }* ;
<e_xor>    = e_xor <e_and>     { e_xor_n    "^"   <e_and> }* ;
<e_and>    = e_and <e_eq>      { e_and_n    "&"   <e_eq> }* ;
<e_eq>     = e_eq  <e_cmp>     { e_eq_1  <op_eq>  <e_cmp> }? ;
<e_cmp>    = e_cmp <e_sft>     { e_cmp_1 <op_cmp> <e_sft> }? ;
<e_sft>    = e_sft <e_add>     { e_sft_n <op_sft> <e_add> }? ;
<e_add>    = e_add <e_mul>     { e_add_n <op_add> <e_mul> }* ;
<e_mul>    = e_mul <e_new>     { e_mul_n <op_mul> <e_new> }* ;
<e_new>    = e_new_ary_1 "new" <type_spec> { e_a1_dim "[" <exp> "]" }+ { e_a_a "[" "]" }* |
             e_new_ary_2 "new" <type_spec> { e_a2_dim "[" "]" }+ <var_init_ary> |
             e_cast "(" <type> ")" <u_left> |
             e_u_left <u_left> ;
<u_left>  = u_left { u_left_1 <op_u_left>  }? <u_right> ;
<u_right> = u_right <prim> { u_right_1 <op_u_right> }? ;

<prim> = prim
         {
            new_obj_1 "new" <dot_name> "(" ")" "{" <method> "}" |
            new_obj_2 "new" <dot_name> <arg_ls> |
            func { call_func <ident> | call_this "this" | call_super "super" } <arg_ls> |
            this "this" | super "super" |
            constant <const> | var <ident> | cls <dot_name> |
            braket "(" <exp> ")"
         }
         {
            ary "[" <exp> "]" |
            mem "." <ident> { call_a_ls <arg_ls> }? |
            mem_cls "." "class"
         }* ;

<lhs> = lhs
         {
            lhs_new_obj_1 "new" <dot_name> "(" ")" "{" <method> "}" |
            lhs_new_obj_2 "new" <dot_name> <arg_ls> |
            lhs_func { lhs_call_func <ident> | lhs_call_this "this" | lhs_call_super "super" } <arg_ls> |
            lhs_this "this" | lhs_super "super" |
            lhs_var <ident> | lhs_cls <dot_name> |
            lhs_braket "(" <exp> ")"
         }
         {
            lhs_ary "[" <exp> "]" |
            lhs_mem "." <ident> { lhs_call_a_ls <arg_ls> }?
         }* ;


<arg_ls> = a_ls "(" { a_ls_1 <arg> { a_ls_n "," <arg> }* }? ")" ;

<const> =  null "null" | true "true" | false "false" | hexa_int <hexa_int> |
           float_real <float_real> | decimal_real <decimal_real> |
           decimal_int <decimal_int> | octed_int <octed_int> | char_int <char_int> |
           string <string> ;

<type> = type <type_spec> { type_ary_n "[" "]" }* ;

<type_spec> = boolean "boolean" |
              byte    "byte"    |
              char    "char"    |
              short   "short"   |
              int     "int"     |
              long    "long"    |
              float   "float"   |
              double  "double"  |
              void    "void"    |
              type_cls <dot_name> ;

<dot_name> = dot_name <ident> { dot_name_n "." <ident> }* ;

/*
<reserve> = reserve  package import class interface extends implements
                     public protected private static final abstract synchronized native
                     if else for while do break continue switch case default
                     return try catch finally throw throws
                     instanceof new this super null true false
                     boolean byte char short int long float double ;
*/

<ident> = regex [a-zA-Z_\$][a-zA-Z_0-9\$]*  string ;

<hexa_int>     = regex 0x[0-9a-fA-F]+(l|L)?          string ;
<float_real>   = regex \-?(([0-9]+\.[0-9]*|[0-9]*\.[0-9]+)((e|E)(\+|\-)?[0-9]+)?|[0-9]+(e|E)(\+|\-)?[0-9]+)(f|F|d|D)? string ;
<decimal_real> = regex \-?(0|[1-9][0-9]*)(f|F|d|D)   string ;
<decimal_int>  = regex \-?(0|[1-9][0-9]*)(l|L)?      string ;
<octed_int>    = regex 0[0-7]*                       string ;
<char_int>     = regex '([^\\']|\\.)'                quote_string ;
<string>       = regex "([^\\"]|\\.)*"               quote_string ;

