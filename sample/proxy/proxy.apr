$END_LIB
TEXT
AlObject
class AltairServer
class LogObj
end_class
class ProxyServer
class ProxyServerConnectionMgr
end_class
class ProxyServerConnection
end_class
class ProxyClientConnection
end_class
end_class
class XmlUtility
class XmlDataRetriver
end_class
end_class
class FileUtility
end_class
class Context
end_class
end_class
$END_CLASS
TEXT
AlObject
class AltairServer
member
public: static void start();
member
public: static void shutdown();
member
public: static void restart();
member
public: static AltairServer appServer;
member
public: list startServer();
member
public: void shutdownServer();
member
public: list load_config();
member
public: list config;
member
public: list web_servers;
member
public: list proxy_servers;
member
public: string pool_name;
member
public: void log(string filepath, string str);
member
public: void system_log(string level, string str);
member
public: string system_log_filepath;
member
public: LogObj logObj;
member
public: static integer getTime(string time);
member
public: void timeoutCheck();
member
public: integer timer_id;
member
public: integer gc_interval;
member
public: integer _gc_time;
member
public: void connection_debug();
member
public: list debug;
member
public: list debug2;
member
public: list debug3;
member
public: string debug_log_file;
class LogObj
member
public: void init();
member
public: void finalize();
member
public: void log(string filepath, string str);
member
public: list log_files;
member
public: static integer max_size;
end_class
class ProxyServer
member
public: string name;
member
public: integer port;
member
public: integer connect_timeout;
member
public: list start();
member
public: void stop();
member
public: ProxyServerConnectionMgr conn_mgr;
member
public: void timeoutCheck();
member
public: integer connectionTimeout;
member
public: AltairServer ap_server;
member
public: integer maxMsgSize;
member
public: void proxy_log(string fromIP, string path, string reason);
member
public: string proxy_log_filepath;
member
public: void error_log(string str);
class ProxyServerConnectionMgr
member
public: void create(ProxyServer server);
member
public: void close();
member
public: ProxyServer server;
member
public: list connections;
member
public: list start();
member
public: integer server_socket_id;
member
public: integer hwnd;
member
public: integer msg;
member
public: void accepted();
end_class
class ProxyServerConnection
member
public: void create(ProxyServer server, integer socket_id);
member
public: void close();
member
public: ProxyServer server;
member
public: integer socket_id;
member
public: integer hwnd;
member
public: integer msg;
member
public: integer msg2;
member
public: integer _time;
member
public: void startReceiveCommand();
member
public: void startReceiveHeaders();
member
public: void startReceive();
member
public: void commandReceived();
member
public: void headersReceived();
member
public: void received();
member
public: integer buffer_size;
member
public: list buffer;
member
public: string command_line;
member
public: string command;
member
public: string request_url;
member
public: string path;
member
public: string http_ver;
member
public: list headers;
member
public: list send(string str);
member
public: list send(list binary);
member
public: list send(list binary, integer index, integer size);
member
public: void sendCompleted();
member
public: string send_status;
member
public: list exiting;
member
public: file in;
member
public: string fromIP;
member
public: ProxyClientConnection conn;
member
public: list sending;
end_class
class ProxyClientConnection
member
public: list create(ProxyServer server, string url);
member
public: ProxyServer server;
member
public: list connect();
member
public: void close();
member
public: string url;
member
public: list ssl;
member
public: string host;
member
public: integer hostaddr;
member
public: string toIP;
member
public: integer port;
member
public: string path;
member
public: integer socket_id;
member
public: integer hwnd;
member
public: integer msg;
member
public: integer msg2;
member
public: integer _time;
member
public: void setTimeout(integer sec);
member
public: integer timeout;
member
public: list send(string str);
member
public: list send(list binary);
member
public: list send(list binary, integer index, integer size);
member
public: void sendCompleted();
member
public: list startReceiveCommand();
member
public: list startReceiveHeaders();
member
public: list startReceive();
member
public: void commandReceived();
member
public: void headersReceived();
member
public: void received();
member
public: list error;
member
public: integer buffer_size;
member
public: list buffer;
member
public: string command_line;
member
public: list headers;
member
public: integer content_length;
member
public: integer total_read_bytes;
member
public: static list connections;
member
public: ProxyServerConnection conn;
member
public: static list hostaddr_cache;
member
public: integer start;
member
public: integer end;
end_class
end_class
class XmlUtility
member
public: static list init;
member
public: static string ctrl_a;
member
public: static string dtd_base;
member
public: static string xsl_base;
member
public: static string content_validation_base;
member
public: static list dtd_cache;
member
public: static list xsl_cache;
member
public: list isLike(string value);
member
public: void skip_optional();
member
public: void skip_choice();
member
public: void skip_case();
member
public: void skip_all_opt();
member
public: list content_validate;
member
public: string validation_errors;
member
public: static list content_validation_report;
class XmlDataRetriver
member
public: void create(list tree);
member
public: list tag_tree;
member
public: list body_tree;
member
public: list itr;
member
public: string tag;
member
public: XmlDataRetriver getItr(string xpath);
member
public: XmlDataRetriver getNext();
member
public: string getValue(string xpath);
end_class
end_class
class FileUtility
member
public: static string tempFile();
member
public: static list readBinary(string filename);
member
public: static string readString(string filename);
member
public: static void writeBinary(string filename, list bin);
member
public: static void writeBinary(string filename, list bin, integer from, integer size);
member
public: static void writeBinary(string filename, string str);
member
public: static void appendBinary(string filename, list bin);
member
public: static void appendBinary(string filename, list bin, integer from, integer size);
member
public: static void appendBinary(string filename, string str);
member
public: static void writeString(string filename, string str);
member
public: static void appendString(string filename, string str);
member
public: static list readGraphData(string filename);
member
public: static void writeGraphData(string filename, list data);
end_class
class Context
member
public: static string genTimeStamp();
member
public: static string genTimeStamp(integer diff);
end_class
end_class
$END_MEMBER
TEXT
AlObject
class AltairServer
member
public: static void start();
body
{
	if (appServer) {
		al_print("[Error] Server already started.\n");
		return;
	} else {
	}
	appServer = new AltairServer;
	var string err;
	if (err = appServer.startServer()) {
		al_print("[Error] fail to start server.(" + err + ")\n");
		appServer.shutdownServer();
		appServer = null;
	} else {
	}
}
end_body
member
public: static void shutdown();
body
{
	if (appServer == null) {
		al_print("[Error] Server not started.\n");
		return;
	} else {
	}
	appServer.shutdownServer();
	appServer = null;
	al_gc(null);
	al_gp("vtbl", null, null, null, null);
}
end_body
member
public: static void restart();
body
{
	shutdown();
	start();
}
end_body
member
public: static AltairServer appServer;
member
public: list startServer();
body
{
	var string err;
	var XmlDataRetriver root, itr, web_server_info, itr2, ssl_info, servlet_info;
	var XmlDataRetriver proxy_server_info, itr3, servlet_param_info, client_info;
	var XmlDataRetriver db_pool_info, pe_info, xml_info;
	// ---- load configuration
	if (err = load_config()) {
		return err;
	} else {
	}
	root = new XmlDataRetriver;
	root.create(config);
	// ---- initialize log file
	logObj = new LogObj;
	logObj.init();
	var integer size;
	size = (integer)root.getValue("AltairServer/MaxLogSize") * 1024;
	if (al_is_type(size, "integer") == null || size < 1) {
		size = 1000;
	} else {
	}
	LogObj::max_size = size;
	system_log_filepath = root.getValue("AltairServer/SystemLog");
	// ---- GC
	gc_interval = (integer)root.getValue("AltairServer/GcInterval");
	_gc_time = 0;
	// ---- start proxy servers
	proxy_servers = al_cons(null, null);
	itr = root.getItr("AltairServer/ProxyServer");
	loop {
		if (proxy_server_info = itr.getNext()) {
		} else {
			break;
		}
		var ProxyServer proxy_server;
		proxy_server = new ProxyServer;
		proxy_server.ap_server = this;
		proxy_server.name = proxy_server_info.getValue("@name");
		proxy_server.port = (integer)proxy_server_info.getValue("Port");
		proxy_server.proxy_log_filepath = proxy_server_info.getValue("ProxyLog");
		proxy_server.connectionTimeout = (integer)proxy_server_info.getValue("ConnectionTimeout");
		if (proxy_server_info.getValue("ConnectTimeout")) {
			proxy_server.connect_timeout = (integer)proxy_server_info.getValue("ConnectTimeout");
		} else {
		}
		al_create_arc(proxy_servers, proxy_server, null);
		if (err = proxy_server.start()) {
			system_log("error", "Proxy Server Startup failed: " + err);
			return err;
		} else {
		}
		system_log("info", "Proxy Server started: port = " + (string)proxy_server.port);
	}
	// ---- start timer
	var list cb;
	timer_id = al_get_id();
	cb = al_list3(al_root_class(), this, AltairServer::timeoutCheck);
	al_gui_misc("timer", al_list2(timer_id, 1000), cb);
	// ---- write startup log
	system_log("info", "<<<<<<<<< system startup completed.");
	return null;
}
end_body
member
public: void shutdownServer();
body
{
	system_log("info", ">>>>>>>>> shutdown system immediately.");
	if (timer_id) {
		al_gui_misc("timer", al_list2(timer_id, 1000), null);
		al_release_id(timer_id);
		timer_id = null;
	} else {
	}
	var list itr;
	var ProxyServer proxy_server;
	itr = al_dst_itr(proxy_servers);
	loop {
		if (proxy_server = al_next(itr)) {
		} else {
			break;
		}
		proxy_server.stop();
		proxy_server.ap_server = null;
	}
	proxy_servers = null;
	XmlUtility::dtd_cache = null;
	if (logObj) {
		logObj.finalize();
		logObj = null;
	} else {
	}
}
end_body
member
public: list load_config();
body
{
	var file f;
	if (f = al_file_open("config.xml", "r")) {
	} else {
		return "config.xml nof found.";
	}
	var list tree_err;
	tree_err = al_xml("parse", f, null, null);
	if (tree_err.tail.head) {
		return "fail to parse config.xml.";
	} else {
	}
	config = tree_err.head;
	return null;
}
end_body
member
public: list config;
member
public: list web_servers;
member
public: list proxy_servers;
member
public: string pool_name;
member
public: void log(string filepath, string str);
body
{
	if (logObj) {
		logObj.log(filepath, str);
	} else {
	}
}
end_body
member
public: void system_log(string level, string str);
body
{
	if (system_log_filepath) {
		log(system_log_filepath, level + ": " + str);
	} else {
	}
}
end_body
member
public: string system_log_filepath;
member
public: LogObj logObj;
member
public: static integer getTime(string time);
body
{
	var integer val, ch;
	val = (integer)time;
	if (al_is_type(time, "string") && al_strlen(time) > 1) {
		ch = al_get_char(time, al_strlen(time) - 1);
	} else {
	}
	if (ch == 's' || ch == 'S') {
		val = val;
	} else {
	}
	if (ch == 'm' || ch == 'M') {
		val = val * 60;
	} else {
	}
	if (ch == 'h' || ch == 'H') {
		val = val * 60 * 60;
	} else {
	}
	if (ch == 'd' || ch == 'D') {
		val = val * 24 * 60 * 60;
	} else {
	}
	return val;
}
end_body
member
public: void timeoutCheck();
body
{
	// ---- garbage collection
	_gc_time = _gc_time + 1;
	if (_gc_time >= gc_interval) {
		var list ls;
		var integer used, recycled, free;
		ls = al_gc(null);
		recycled = ls.head;
		free = ls.tail.head;
		used = ls.tail.tail.head;
		system_log("info", "garbage collection: recycled = " + (string)recycled + ", used = " + (string)used + ", total = " + (string)(recycled + free + used));
		_gc_time = 0;
	} else {
	}
}
end_body
member
public: integer timer_id;
member
public: integer gc_interval;
member
public: integer _gc_time;
member
public: void connection_debug();
body
{
	// ---- dump connection create/close and send/receive
	// debug = 1;
	// ---- dump request/response header to proxy
	// debug2 = 1;
	// ---- dump send proxy message to server/browser
	// debug3 = 1;
	// ---- connection debug log filepath
	// debug_log_file = "./debug.log";
}
end_body
member
public: list debug;
member
public: list debug2;
member
public: list debug3;
member
public: string debug_log_file;
class LogObj
member
public: void init();
body
{
	log_files = al_cons(null, null);
}
end_body
member
public: void finalize();
body
{
	log_files = null;
}
end_body
member
public: void log(string filepath, string str);
body
{
	if (filepath) {
	} else {
		return;
	}
	var file f;
	if (f = al_dst_node(log_files, filepath)) {
	} else {
		if (f = al_file_open(filepath, "a")) {
		} else {
			al_print("can't create logfile: filepath = " + filepath + "\n");
			al_print("message = \"" + str + "\"\n");
			return;
		}
		al_create_arc(log_files, f, filepath);
	}
	var list date;
	var list date_str;
	date = al_file_manip("current_datetime", null, null);
	date_str = al_misc("format_time", date, "yyyy'/'MM'/'dd' 'HH':'mm':'ss");
	al_file_write(f, "string", date_str + " " + str + "\n");
	al_file_manip("flush", f, null);
	if (al_file_manip("get_size", filepath, null) > max_size) {
		f = null;
		al_set_dst_node(log_files, filepath, null);
		var string filepath2;
		filepath2 = filepath + "." + Context::genTimeStamp();
		al_file_manip("rename", filepath, filepath2);
	} else {
	}
}
end_body
member
public: list log_files;
member
public: static integer max_size;
end_class
class ProxyServer
member
public: string name;
member
public: integer port;
member
public: integer connect_timeout;
member
public: list start();
body
{
	var string err;
	conn_mgr = new ProxyServerConnectionMgr;
	conn_mgr.create(this);
	if (err = conn_mgr.start()) {
		return err;
	} else {
	}
}
end_body
member
public: void stop();
body
{
	if (conn_mgr) {
		conn_mgr.close();
		conn_mgr = null;
	} else {
	}
	ap_server = null;
}
end_body
member
public: ProxyServerConnectionMgr conn_mgr;
member
public: void timeoutCheck();
body
{
	var list itr;
	if (conn_mgr && conn_mgr.connections) {
		var ProxyServerConnection conn;
		itr = al_dst_itr(conn_mgr.connections);
		loop {
			if (conn = al_next(itr)) {
			} else {
				break;
			}
			conn._time = conn._time + 1;
			if (conn._time >= connectionTimeout) {
				al_prev(itr);
				conn.close();
			} else {
			}
		}
	} else {
	}
}
end_body
member
public: integer connectionTimeout;
member
public: AltairServer ap_server;
member
public: integer maxMsgSize;
member
public: void proxy_log(string fromIP, string path, string reason);
body
{
	if (ap_server) {
		if (proxy_log_filepath) {
			var string s;
			s = ", " + (string)fromIP + " ,\"" + (string)path + "\", " + (string)reason;
			ap_server.log(proxy_log_filepath, s);
		} else {
		}
	} else {
	}
}
end_body
member
public: string proxy_log_filepath;
member
public: void error_log(string str);
body
{
	ap_server.system_log("error", "ProxyServer: " + str);
}
end_body
class ProxyServerConnectionMgr
member
public: void create(ProxyServer server);
body
{
	this.server = server;
	connections = al_cons(null, null);
}
end_body
member
public: void close();
body
{
	if (server_socket_id) {
		al_socket("close", server_socket_id, null, null);
		server_socket_id = null;
	} else {
	}
	if (hwnd && msg) {
		al_wnd_message(null, "msg_callback", msg, null);
		al_wnd_message(null, "unregister_msg", msg, null);
		hwnd = msg = null;
	} else {
	}
	var list itr;
	var ProxyServerConnection conn;
	loop {
		itr = al_dst_itr(connections);
		if (conn = al_next(itr)) {
		} else {
			break;
		}
		conn.close();
	}
	server = null;
}
end_body
member
public: ProxyServer server;
member
public: list connections;
member
public: list start();
body
{
	var string err;
	if (server_socket_id = al_socket("socket", null, null, null)) {
	} else {
		return "fail to create server socket.";
	}
	if (al_socket("bind", server_socket_id, al_list2(0, server.port), null)) {
		err = (string)al_socket("get_last_error", server_socket_id, null, null);
		err = "fail to bind socket with port = " + (string)server.port + ". (" + err + ")";
		close();
		return err;
	} else {
	}
	if (al_socket("listen", server_socket_id, null, null)) {
		err = (string)al_socket("get_last_error", server_socket_id, null, null);
		close();
		return "fail to listen socket. (" + err + ")";
	} else {
	}
	var list cb;
	hwnd = al_wnd_message(null, "hwnd", null, null);
	msg = al_wnd_message(null, "register_msg", "ACCEPT" + (string)server_socket_id, null);
	cb = al_list3(al_root_class(), this, ProxyServerConnectionMgr::accepted);
	al_wnd_message(null, "msg_callback", msg, cb);
	if (al_socket("accept_que", server_socket_id, al_list2(hwnd, msg), null)) {
		err = (string)al_socket("get_last_error", server_socket_id, null, null);
		close();
		return "fail to start accept_queue. (" + err + ")";
	} else {
	}
	return null;
}
end_body
member
public: integer server_socket_id;
member
public: integer hwnd;
member
public: integer msg;
member
public: void accepted();
body
{
	var integer socket_id;
	server_socket_id = al_wnd_message(null, "wParam", null, null);
	if (socket_id = al_socket("get_socket", server_socket_id, null, null)) {
	} else {
		server.error_log("fail to get_socket: port = " + (string)server.port);
		return;
	}
	if (socket_id < 0) {
		server.error_log("fail to accept socket: port = " + (string)server.port);
		return;
	} else {
	}
	var ProxyServerConnection conn;
	conn = new ProxyServerConnection;
	conn.create(server, socket_id);
	conn._time = 0;
	var list ip_addr;
	ip_addr = al_socket("getpeername", socket_id, null, null);
	if (ip_addr) {
		ip_addr = ip_addr.head;
		conn.fromIP = al_socket("address_string", ip_addr, null, null);
	} else {
		conn.fromIP = "";
	}
	al_create_arc(connections, conn, socket_id);
	conn.startReceiveCommand();
}
end_body
end_class
class ProxyServerConnection
member
public: void create(ProxyServer server, integer socket_id);
body
{
	connection_debug();
	if (debug) {
		if (debug_log_file && appServer) {
			appServer.log(debug_log_file, "!!! ProxyServerConnection::create: socket_id = " + (string)socket_id);
		} else {
			al_print("!!! ProxyServerConnection::create: socket_id = " + (string)socket_id + "\n");
		}
	} else {
	}
	this.server = server;
	this.socket_id = socket_id;
	hwnd = al_wnd_message(null, "hwnd", null, null);
	msg = al_wnd_message(null, "register_msg", "ProxySvrConn-" + (string)socket_id, null);
	msg2 = al_wnd_message(null, "register_msg", "ProxySvrConn2-" + (string)socket_id, null);
	buffer_size = 4096;
}
end_body
member
public: void close();
body
{
	if (debug) {
		if (debug_log_file && appServer) {
			appServer.log(debug_log_file, "!!! ProxyServerConnection::close: socket_id = " + (string)socket_id);
		} else {
			al_print("!!! ProxyServerConnection::close: socket_id = " + (string)socket_id + "\n");
		}
	} else {
	}
	var integer id;
	id = socket_id;
	if (socket_id) {
		al_socket("close", socket_id, null, null);
		socket_id = null;
	} else {
	}
	if (hwnd && msg && msg2) {
		al_wnd_message(null, "msg_callback", msg, null);
		al_wnd_message(null, "msg_callback", msg2, null);
		al_wnd_message(null, "unregister_msg", msg, null);
		al_wnd_message(null, "unregister_msg", msg2, null);
		hwnd = msg = msg2 = null;
	} else {
	}
	var list connections;
	if (connections = al_src_node(this, id)) {
		al_set_dst_node(connections, id, null);
	} else {
	}
	if (conn && conn.socket_id) {
		conn.close();
		conn = null;
	} else {
	}
}
end_body
member
public: ProxyServer server;
member
public: integer socket_id;
member
public: integer hwnd;
member
public: integer msg;
member
public: integer msg2;
member
public: integer _time;
member
public: void startReceiveCommand();
body
{
	if (msg) {
	} else {
		return;
	}
	if (debug) {
		if (debug_log_file && appServer) {
			appServer.log(debug_log_file, "!!! ProxyServerConnection::startReceiveCommand: socket_id = " + (string)socket_id);
		} else {
			al_print("!!! ProxyServerConnection::startReceiveCommand: socket_id = " + (string)socket_id + "\n");
		}
	} else {
	}
	var list cb, buf, err;
	cb = al_list3(al_root_class(), this, ProxyServerConnection::commandReceived);
	al_wnd_message(null, "msg_callback", msg, cb);
	buffer = al_misc("binary", buffer_size, null);
	buf = al_list3(buffer, 0, buffer_size);
	if (al_socket("recv", socket_id, buf, al_list3(hwnd, msg, 1))) {
		err = (string)al_socket("get_last_error", socket_id, null, null);
		// *** server.error_log("recv error.(" + err + ")");
		close();
		return;
	} else {
	}
}
end_body
member
public: void startReceiveHeaders();
body
{
	if (msg) {
	} else {
		return;
	}
	if (debug) {
		if (debug_log_file && appServer) {
			appServer.log(debug_log_file, "!!! ProxyServerConnection::startReceiveHeaders: socket_id = " + (string)socket_id);
		} else {
			al_print("!!! ProxyServerConnection::startReceiveHeaders: socket_id = " + (string)socket_id + "\n");
		}
	} else {
	}
	var list cb, buf, err;
	cb = al_list3(al_root_class(), this, ProxyServerConnection::headersReceived);
	al_wnd_message(null, "msg_callback", msg, cb);
	buffer = al_misc("binary", buffer_size, null);
	buf = al_list3(buffer, 0, buffer_size);
	if (al_socket("recv", socket_id, buf, al_list3(hwnd, msg, 2))) {
		err = (string)al_socket("get_last_error", socket_id, null, null);
		// *** server.error_log("recv error.(" + err + ")");
		close();
		return;
	} else {
	}
}
end_body
member
public: void startReceive();
body
{
	if (msg) {
	} else {
		return;
	}
	if (debug) {
		if (debug_log_file && appServer) {
			appServer.log(debug_log_file, "!!! ProxyServerConnection::startReceive: socket_id = " + (string)socket_id);
		} else {
			al_print("!!! ProxyServerConnection::startReceive: socket_id = " + (string)socket_id + "\n");
		}
	} else {
	}
	var list cb, buf, err;
	cb = al_list3(al_root_class(), this, ProxyServerConnection::received);
	al_wnd_message(null, "msg_callback", msg, cb);
	buf = al_list3(buffer, 0, buffer_size);
	if (al_socket("recv", socket_id, buf, al_list2(hwnd, msg))) {
		err = (string)al_socket("get_last_error", socket_id, null, null);
		// *** server.error_log("recv error.(" + err + ")");
		close();
		return;
	} else {
	}
}
end_body
member
public: void commandReceived();
body
{
	var list err;
	var integer read_bytes;
	read_bytes = al_wnd_message(null, "lParam", null, null);
	if (debug) {
		if (debug_log_file && appServer) {
			appServer.log(debug_log_file, "!!! ProxyServerConnection::commandReceived: socket_id = " + (string)socket_id + ", read_bytes = " + (string)read_bytes);
		} else {
			al_print("!!! ProxyServerConnection::commandReceived: socket_id = " + (string)socket_id + ", read_bytes = " + (string)read_bytes + "\n");
		}
	} else {
	}
	if (read_bytes < 0) {
		err = (string)al_socket("get_last_error", socket_id, null, null);
		// *** server.error_log("recv error. (" + err + ")");
		close();
		return;
	} else {
	}
	if (al_misc("get_byte", al_list2(buffer, read_bytes - 1), null) == '\r') {
		command_line = al_misc("binary_to_string", al_list3(buffer, 0, read_bytes - 1), null);
	} else {
		command_line = al_misc("binary_to_string", al_list3(buffer, 0, read_bytes), null);
	}
	var string cmd;
	in = al_file_open(command_line, "sr");
	if (cmd = al_file_read(in, "string")) {
	} else {
		// *** server.error_log("request Method not found.");
		close();
		return;
	}
	cmd = al_str_misc("to_upper", cmd, null);
	if (request_url = al_file_read(in, "string")) {
	} else {
		// *** server.error_log("request URI not found.");
		close();
		return;
	}
	if (http_ver = al_file_read(in, "string")) {
	} else {
		// *** server.error_log("HTTP version not found.");
		close();
		return;
	}
	command = cmd;
	if (command == "CONNECT") {
		request_url = "https://" + request_url + "/";
	} else {
	}
	_time = 0;
	conn = new ProxyClientConnection;
	if (err = conn.create(server, request_url)) {
		conn = null;
		send_status = "proxy_response_400";
		if (err = send(http_ver + " 400 Bad Request\r\n")) {
			// *** server.error_log("bad request URI.");
			close();
			return;
		} else {
		}
		return;
	} else {
	}
	if (err = conn.connect()) {
		server.proxy_log(fromIP, command_line, "[ERROR]" + (string)err);
		send_status = "proxy_response_400";
		if (err = send(http_ver + " 400 Bad Request\r\n")) {
			// *** server.error_log("can't connect to server of request URI.");
			close();
			return;
		} else {
		}
		return;
	} else {
		// server.proxy_log(fromIP, command_line, "");
	}
	conn.conn = this;
	if (command == "CONNECT") {
		var string status, headers_str, res;
		var list headers, buf;
		status = http_ver + " 200 Connection established\r\n";
		headers = al_cons(null, null);
		al_set_dst_node(headers, "Server", "AltairServer" + al_misc("version", null, null));
		buf = al_crypt("mime_headers_write", headers, null, null);
		headers_str = al_misc("binary_to_string", al_list3(buf, 0, al_misc("binary_size", buf, null)), null);
		res = status + headers_str;
		send_status = "proxy_response_200";
		if (err = send(res)) {
			close();
			return;
		} else {
		}
		if (err = conn.startReceive()) {
			close();
			return;
		} else {
		}
	} else {
		startReceiveHeaders();
	}
}
end_body
member
public: void headersReceived();
body
{
	var list err;
	var integer read_bytes;
	read_bytes = al_wnd_message(null, "lParam", null, null);
	if (debug) {
		if (debug_log_file && appServer) {
			appServer.log(debug_log_file, "!!! ProxyServerConnection::headersReceived: socket_id = " + (string)socket_id + ", read_bytes = " + (string)read_bytes);
		} else {
			al_print("!!! ProxyServerConnection::headersReceived: socket_id = " + (string)socket_id + ", read_bytes = " + (string)read_bytes + "\n");
		}
	} else {
	}
	if (read_bytes < 0) {
		err = (string)al_socket("get_last_error", socket_id, null, null);
		// *** server.error_log("recv error. (" + err + ")");
		close();
		return;
	} else {
	}
	if (send_status) {
		startReceive();
	} else {
		var string cmd_str, hdrs_str;
		var integer size;
		cmd_str = command + " " + conn.path + " " + http_ver + "\r\n";
		headers = al_misc("binary", read_bytes, null);
		al_misc("binary_copy", al_list2(headers, 0), al_list3(buffer, 0, read_bytes));
		if (debug2) {
			size = al_misc("binary_size", headers, null);
			hdrs_str = al_misc("binary_to_string", al_list3(headers, 0, size), null);
			if (debug_log_file && appServer) {
				appServer.log(debug_log_file, "======== Recv Proxy Request Header: proxy_server_socket_id = " + (string)socket_id + ", proxy_client_socket_id = " + (string)conn.socket_id + "\n" + cmd_str + hdrs_str);
			} else {
				al_print("======== Recv Proxy Request Header: proxy_server_socket_id = " + (string)socket_id + ", proxy_client_socket_id = " + (string)conn.socket_id + "\n" + cmd_str + hdrs_str);
			}
		} else {
		}
		headers = al_crypt("remove_header", headers, "Proxy-Connection", null);
		headers = al_crypt("add_header", headers, "Connection: Close\r\n", null);
		// ignore cache-control
		headers = al_crypt("remove_header", headers, "If-Modified-Since", null);
		headers = al_crypt("remove_header", headers, "If-Match", null);
		headers = al_crypt("remove_header", headers, "If-None-Match", null);
		headers = al_crypt("remove_header", headers, "If-Range", null);
		headers = al_crypt("remove_header", headers, "If-Unmodified-Since", null);
		headers = al_crypt("remove_header", headers, "Pragma", null);
		size = al_misc("binary_size", headers, null);
		hdrs_str = al_misc("binary_to_string", al_list3(headers, 0, size), null);
		if (debug2) {
			if (debug_log_file && appServer) {
				appServer.log(debug_log_file, "======== Send Proxy Request Header: proxy_server_socket_id = " + (string)socket_id + ", proxy_client_socket_id = " + (string)conn.socket_id + "\n" + cmd_str + hdrs_str);
			} else {
				al_print("======== Send Proxy Request Header: proxy_server_socket_id = " + (string)socket_id + ", proxy_client_socket_id = " + (string)conn.socket_id + "\n" + cmd_str + hdrs_str);
			}
		} else {
		}
		send_status = "proxy_response";
		if (err = conn.send(cmd_str + hdrs_str)) {
			close();
			return;
		} else {
		}
		if (err = conn.startReceiveCommand()) {
			close();
			return;
		} else {
		}
	}
}
end_body
member
public: void received();
body
{
	var list err;
	var integer read_bytes;
	read_bytes = al_wnd_message(null, "lParam", null, null);
	if (debug) {
		if (debug_log_file && appServer) {
			appServer.log(debug_log_file, "!!! ProxyServerConnection::received: socket_id = " + (string)socket_id + ", read_bytes = " + (string)read_bytes);
		} else {
			al_print("!!! ProxyServerConnection::received: socket_id = " + (string)socket_id + ", read_bytes = " + (string)read_bytes + "\n");
		}
	} else {
	}
	if (read_bytes < 0) {
		err = (string)al_socket("get_last_error", socket_id, null, null);
		// *** server.error_log("recv error. (" + err + ")");
		close();
		return;
	} else {
	}
	if (read_bytes > 0 && conn) {
		conn.send(buffer, 0, read_bytes);
	} else {
	}
}
end_body
member
public: integer buffer_size;
member
public: list buffer;
member
public: string command_line;
member
public: string command;
member
public: string request_url;
member
public: string path;
member
public: string http_ver;
member
public: list headers;
member
public: list send(string str);
body
{
	var integer size;
	var list binary;
	size = al_strlen(str);
	binary = al_misc("binary", size, null);
	al_misc("binary_copy", al_list2(binary, 0), str);
	return send(binary, 0, size);
}
end_body
member
public: list send(list binary);
body
{
	var integer size;
	size = al_misc("binary_size", binary, null);
	return send(binary, 0, size);
}
end_body
member
public: list send(list binary, integer index, integer size);
body
{
	if (debug) {
		if (debug_log_file && appServer) {
			appServer.log(debug_log_file, "!!! ProxyServerConnection::send: socket_id = " + (string)socket_id + ", size = " + (string)size);
		} else {
			al_print("!!! ProxyServerConnection::send: socket_id = " + (string)socket_id + ", size = " + (string)size + "\n");
		}
	} else {
	}
	var list cb, block;
	cb = al_list3(al_root_class(), this, ProxyServerConnection::sendCompleted);
	al_wnd_message(null, "msg_callback", msg2, cb);
	block = al_list3(binary, index, size);
	if (debug3) {
		if (debug_log_file && appServer) {
			appServer.log(debug_log_file, "---- send to Browser\n" + (string)al_misc("binary_to_string", block, null));
		} else {
			al_print("---- send to Browser\n" + (string)al_misc("binary_to_string", block, null));
		}
	} else {
	}
	if (al_socket("send", socket_id, block, al_list2(hwnd, msg2))) {
		return "send error. (" + (string)al_socket("get_last_error", socket_id, null, null) + ")";
	} else {
	}
	sending = 1;
	return null;
}
end_body
member
public: void sendCompleted();
body
{
	sending = null;
	var string err;
	var integer send_bytes;
	send_bytes = al_wnd_message(null, "lParam", null, null);
	if (debug) {
		if (debug_log_file && appServer) {
			appServer.log(debug_log_file, "!!! ProxyServerConnection::sendCompleted: socket_id = " + (string)socket_id + ", send_bytes = " + (string)send_bytes);
		} else {
			al_print("!!! ProxyServerConnection::sendCompleted: socket_id = " + (string)socket_id + ", send_bytes = " + (string)send_bytes + "\n");
		}
	} else {
	}
	if (send_bytes < 0) {
		err = (string)al_socket("get_last_error", socket_id, null, null);
		// *** server.error_log("send error. (" + err + ")");
		close();
		return;
	} else {
	}
	if (exiting) {
		close();
		return;
	} else {
	}
	if (send_status == "proxy_response_200") {
		send_status = "proxy_response";
		if (err = startReceiveHeaders()) {
			close();
			return;
		} else {
		}
		_time = 0;
		return;
	} else {
	}
	if (send_status == "proxy_response") {
		if (conn && conn.socket_id) {
			if (err = conn.startReceive()) {
				close();
				return;
			} else {
			}
			return;
		} else {
		}
		_time = 0;
		return;
	} else {
	}
	close();
	return;
}
end_body
member
public: string send_status;
member
public: list exiting;
member
public: file in;
member
public: string fromIP;
member
public: ProxyClientConnection conn;
member
public: list sending;
end_class
class ProxyClientConnection
member
public: list create(ProxyServer server, string url);
body
{
	connection_debug();
	this.server = server;
	if (url == null) {
		return "url is null.";
	} else {
	}
	this.url = url;
	var integer i;
	var string head, tail;
	i = al_search_str(url, 0, "//");
	if (i < 0) {
		return "http:// or https:// required: url = " + (string)url;
	} else {
	}
	head = al_substr(url, 0, i);
	if (head == "http:") {
		ssl = null;
	} else {
		if (head == "https:") {
			ssl = 1;
		} else {
			return "http:// or https:// required: url = " + (string)url;
		}
	}
	tail = al_tail_str(url, i + 2);
	i = al_search_str(tail, 0, "/");
	if (i > 0) {
		path = al_tail_str(tail, i);
		tail = al_substr(tail, 0, i);
	} else {
		path = "/";
	}
	i = al_search_str(tail, 0, ":");
	if (i >= 0) {
		host = al_substr(tail, 0, i);
		port = (integer)al_tail_str(tail, i + 1);
	} else {
		host = tail;
		if (ssl) {
			port = 443;
		} else {
			port = 80;
		}
	}
	buffer_size = 4096;
	buffer = al_misc("binary", buffer_size, null);
	// default timeout is 60 sec (1 minutes)
	_time = 0;
	timeout = 60;
	return null;
}
end_body
member
public: ProxyServer server;
member
public: list connect();
body
{
	start = al_misc("time_stamp", null, null);
	if (socket_id = al_socket("socket", null, null, null)) {
	} else {
		return "fail to create socket";
	}
	if (hostaddr_cache) {
	} else {
		hostaddr_cache = al_cons(null, null);
	}
	if (hostaddr = al_dst_node(hostaddr_cache, host)) {
	} else {
		if (hostaddr = al_socket("gethostbyname", host, null, null)) {
		} else {
			return "fail to get hostaddr: host = " + (string)host;
		}
		al_create_arc(hostaddr_cache, hostaddr, host);
	}
	if (al_socket("connect", socket_id, al_list2(hostaddr, port), server.connect_timeout)) {
		return "fail to connect socket.(" + (string)al_socket("get_last_error", socket_id, null, null) + ")";
	} else {
	}
	toIP = al_socket("address_string", hostaddr, null, null);
	hwnd = al_wnd_message(null, "hwnd", null, null);
	msg = al_wnd_message(null, "register_msg", "ProxyClntConn-" + (string)socket_id, null);
	msg2 = al_wnd_message(null, "register_msg", "ProxyClntConn2-" + (string)socket_id, null);
	if (connections) {
	} else {
		connections = al_cons(null, null);
	}
	al_create_arc(connections, this, socket_id);
	if (debug) {
		if (debug_log_file && appServer) {
			appServer.log(debug_log_file, "!!! ProxyClientConnection::create: socket_id = " + (string)socket_id);
		} else {
			al_print("!!! ProxyClientConnection::create: socket_id = " + (string)socket_id + "\n");
		}
	} else {
	}
	return null;
}
end_body
member
public: void close();
body
{
	if (debug) {
		if (debug_log_file && appServer) {
			appServer.log(debug_log_file, "!!! ProxyClientConnection::close: socket_id = " + (string)socket_id);
		} else {
			al_print("!!! ProxyClientConnection::close: socket_id = " + (string)socket_id + "\n");
		}
	} else {
	}
	var integer id;
	id = socket_id;
	if (socket_id) {
		al_socket("close", socket_id, null, null);
		socket_id = null;
	} else {
	}
	if (hwnd && msg && msg2) {
		al_wnd_message(null, "msg_callback", msg, null);
		al_wnd_message(null, "msg_callback", msg2, null);
		al_wnd_message(null, "unregister_msg", msg, null);
		al_wnd_message(null, "unregister_msg", msg2, null);
		hwnd = msg = msg2 = null;
	} else {
	}
	var list conns;
	if (conns = al_src_node(this, id)) {
		al_set_dst_node(conns, id, null);
	} else {
	}
	end = al_misc("time_stamp", null, null);
	server.proxy_log(conn.fromIP, (string)conn.command_line + " " + (string)toIP, (string)(end - start));
	conn = null;
}
end_body
member
public: string url;
member
public: list ssl;
member
public: string host;
member
public: integer hostaddr;
member
public: string toIP;
member
public: integer port;
member
public: string path;
member
public: integer socket_id;
member
public: integer hwnd;
member
public: integer msg;
member
public: integer msg2;
member
public: integer _time;
member
public: void setTimeout(integer sec);
body
{
	timeout = sec;
}
end_body
member
public: integer timeout;
member
public: list send(string str);
body
{
	var integer size;
	var list binary;
	size = al_strlen(str);
	binary = al_misc("binary", size, null);
	al_misc("binary_copy", al_list2(binary, 0), str);
	return send(binary, 0, size);
}
end_body
member
public: list send(list binary);
body
{
	var integer size;
	size = al_misc("binary_size", binary, null);
	return send(binary, 0, size);
}
end_body
member
public: list send(list binary, integer index, integer size);
body
{
	if (debug) {
		if (debug_log_file && appServer) {
			appServer.log(debug_log_file, "!!! ProxyClientConnection::send: socket_id = " + (string)socket_id + ", size = " + (string)size);
		} else {
			al_print("!!! ProxyClientConnection::send: socket_id = " + (string)socket_id + ", size = " + (string)size + "\n");
		}
	} else {
	}
	var list cb, block;
	cb = al_list3(al_root_class(), this, ProxyClientConnection::sendCompleted);
	al_wnd_message(null, "msg_callback", msg2, cb);
	block = al_list3(binary, index, size);
	if (debug3) {
		if (debug_log_file && appServer) {
			appServer.log(debug_log_file, "---- send to Server\n" + (string)al_misc("binary_to_string", block, null));
		} else {
			al_print("---- send to Server\n" + (string)al_misc("binary_to_string", block, null));
		}
	} else {
	}
	if (al_socket("send", socket_id, block, al_list2(hwnd, msg2))) {
		return "send error. (" + (string)al_socket("get_last_error", socket_id, null, null) + ")";
	} else {
	}
	return null;
}
end_body
member
public: void sendCompleted();
body
{
	if (debug) {
		if (debug_log_file && appServer) {
			appServer.log(debug_log_file, "!!! ProxyClientConnection::sendCompleted: socket_id = " + (string)socket_id);
		} else {
			al_print("!!! ProxyClientConnection::sendCompleted: socket_id = " + (string)socket_id + "\n");
		}
	} else {
	}
	if (conn) {
		conn.startReceive();
	} else {
	}
}
end_body
member
public: list startReceiveCommand();
body
{
	if (msg) {
	} else {
		return "already closed.";
	}
	if (debug) {
		if (debug_log_file && appServer) {
			appServer.log(debug_log_file, "!!! ProxyClientConnection::startReceiveCommand: socket_id = " + (string)socket_id);
		} else {
			al_print("!!! ProxyClientConnection::startReceiveCommand: socket_id = " + (string)socket_id + "\n");
		}
	} else {
	}
	var list cb, buf, err;
	cb = al_list3(al_root_class(), this, ProxyClientConnection::commandReceived);
	al_wnd_message(null, "msg_callback", msg, cb);
	buffer = al_misc("binary", buffer_size, null);
	buf = al_list3(buffer, 0, buffer_size);
	if (al_socket("recv", socket_id, buf, al_list3(hwnd, msg, 1))) {
		err = (string)al_socket("get_last_error", socket_id, null, null);
		err = "recv error.(" + err + ")";
		// *** server.error_log(err);
		close();
		return err;
	} else {
	}
	return null;
}
end_body
member
public: list startReceiveHeaders();
body
{
	if (debug) {
		if (debug_log_file && appServer) {
			appServer.log(debug_log_file, "!!! ProxyClientConnection::startReceiveHeaders: socket_id = " + (string)socket_id);
		} else {
			al_print("!!! ProxyClientConnection::startReceiveHeaders: socket_id = " + (string)socket_id + "\n");
		}
	} else {
	}
	var list cb, buf, err;
	cb = al_list3(al_root_class(), this, ProxyClientConnection::headersReceived);
	al_wnd_message(null, "msg_callback", msg, cb);
	buf = al_list3(buffer, 0, buffer_size);
	if (al_socket("recv", socket_id, buf, al_list3(hwnd, msg, 2))) {
		err = (string)al_socket("get_last_error", socket_id, null, null);
		err = "recv error. (" + err + ")";
		// *** server.error_log(err);
		return err;
	} else {
	}
	return null;
}
end_body
member
public: list startReceive();
body
{
	if (debug) {
		if (debug_log_file && appServer) {
			appServer.log(debug_log_file, "!!! ProxyClientConnection::startReceive: socket_id = " + (string)socket_id);
		} else {
			al_print("!!! ProxyClientConnection::startReceive: socket_id = " + (string)socket_id + "\n");
		}
	} else {
	}
	var list cb, buf, err;
	cb = al_list3(al_root_class(), this, ProxyClientConnection::received);
	al_wnd_message(null, "msg_callback", msg, cb);
	buf = al_list3(buffer, 0, buffer_size);
	if (al_socket("recv", socket_id, buf, al_list2(hwnd, msg))) {
		err = (string)al_socket("get_last_error", socket_id, null, null);
		// *** server.error_log("recv error.(" + err + ")");
		close();
		return err;
	} else {
	}
	return null;
}
end_body
member
public: void commandReceived();
body
{
	var list err;
	var integer read_bytes;
	read_bytes = al_wnd_message(null, "lParam", null, null);
	if (debug) {
		if (debug_log_file && appServer) {
			appServer.log(debug_log_file, "!!! ProxyClientConnection::commandReceived: socket_id = " + (string)socket_id + ", read_bytes = " + (string)read_bytes);
		} else {
			al_print("!!! ProxyClientConnection::commandReceived: socket_id = " + (string)socket_id + ", read_bytes = " + (string)read_bytes + "\n");
		}
	} else {
	}
	if (read_bytes < 0) {
		err = (string)al_socket("get_last_error", socket_id, null, null);
		// *** server.error_log("recv error. (" + err + ")");
		close();
		return;
	} else {
	}
	if (al_misc("get_byte", al_list2(buffer, read_bytes - 1), null) == '\r') {
		command_line = al_misc("binary_to_string", al_list3(buffer, 0, read_bytes - 1), null);
	} else {
		command_line = al_misc("binary_to_string", al_list3(buffer, 0, read_bytes), null);
	}
	startReceiveHeaders();
}
end_body
member
public: void headersReceived();
body
{
	if (socket_id) {
	} else {
		return;
	}
	var list err;
	var integer read_bytes;
	read_bytes = al_wnd_message(null, "lParam", null, null);
	if (debug) {
		if (debug_log_file && appServer) {
			appServer.log(debug_log_file, "!!! ProxyClientConnection::headersReceived: socket_id = " + (string)socket_id + ", read_bytes = " + (string)read_bytes);
		} else {
			al_print("!!! ProxyClientConnection::headersReceived: socket_id = " + (string)socket_id + ", read_bytes = " + (string)read_bytes + "\n");
		}
	} else {
	}
	if (read_bytes < 0) {
		err = (string)al_socket("get_last_error", socket_id, null, null);
		// *** server.error_log("recv error. (" + err + ")");
		close();
		return;
	} else {
	}
	var string cmd_str, hdrs_str;
	var integer size;
	cmd_str = command_line + "\r\n";
	headers = al_misc("binary", read_bytes, null);
	al_misc("binary_copy", al_list2(headers, 0), al_list3(buffer, 0, read_bytes));
	if (debug2) {
		size = al_misc("binary_size", headers, null);
		hdrs_str = al_misc("binary_to_string", al_list3(headers, 0, size), null);
		if (debug_log_file && appServer) {
			appServer.log(debug_log_file, "======== Recv Proxy Response Header: proxy_server_socket_id = " + (string)conn.socket_id + ", proxy_client_socket_id = " + (string)socket_id + "\n" + cmd_str + hdrs_str);
		} else {
			al_print("======== Recv Proxy Response Header: proxy_server_socket_id = " + (string)conn.socket_id + ", proxy_client_socket_id = " + (string)socket_id + "\n" + cmd_str + hdrs_str);
		}
	} else {
	}
	headers = al_crypt("remove_header", headers, "Connection", null);
	headers = al_crypt("add_header", headers, "Proxy-Connection: Close\r\n", null);
	// ignore cache control
	headers = al_crypt("remove_header", headers, "Cache-Control", null);
	headers = al_crypt("remove_header", headers, "ETag", null);
	if (content_length = al_crypt("get_header", headers, "Content-Length", null)) {
		content_length = (integer)content_length;
		if (debug2) {
			if (debug_log_file && appServer) {
				appServer.log(debug_log_file, "Content-Length = " + (string)content_length + "\n");
			} else {
				al_print("Content-Length = " + (string)content_length + "\n");
			}
		} else {
		}
		if (content_length < 0) {
			close();
			return;
		} else {
		}
		total_read_bytes = 0;
	} else {
	}
	size = al_misc("binary_size", headers, null);
	hdrs_str = al_misc("binary_to_string", al_list3(headers, 0, size), null);
	if (debug2) {
		if (debug_log_file && appServer) {
			appServer.log(debug_log_file, "======== Send Proxy Response Header: proxy_server_socket_id = " + (string)conn.socket_id + ", proxy_client_socket_id = " + (string)socket_id + "\n" + cmd_str + hdrs_str);
		} else {
			al_print("======== Send Proxy Response Header: proxy_server_socket_id = " + (string)conn.socket_id + ", proxy_client_socket_id = " + (string)socket_id + "\n" + cmd_str + hdrs_str);
		}
	} else {
	}
	if (err = conn.send(cmd_str + hdrs_str)) {
		close();
		return;
	} else {
	}
}
end_body
member
public: void received();
body
{
	var list err;
	var integer read_bytes;
	read_bytes = al_wnd_message(null, "lParam", null, null);
	if (debug) {
		if (debug_log_file && appServer) {
			appServer.log(debug_log_file, "!!! ProxyClientConnection::received: socket_id = " + (string)socket_id + ", read_bytes = " + (string)read_bytes);
		} else {
			al_print("!!! ProxyClientConnection::received: socket_id = " + (string)socket_id + ", read_bytes = " + (string)read_bytes + "\n");
		}
	} else {
	}
	if (read_bytes <= 0) {
		err = (string)al_socket("get_last_error", socket_id, null, null);
		if (conn && conn.sending == null) {
			conn.close();
		} else {
			close();
		}
		return;
	} else {
	}
	if (read_bytes > 0 && conn) {
		if (content_length) {
			total_read_bytes = total_read_bytes + read_bytes;
			if (total_read_bytes >= content_length) {
				conn.exiting = 1;
			} else {
			}
		} else {
		}
		conn.send(buffer, 0, read_bytes);
	} else {
	}
}
end_body
member
public: list error;
member
public: integer buffer_size;
member
public: list buffer;
member
public: string command_line;
member
public: list headers;
member
public: integer content_length;
member
public: integer total_read_bytes;
member
public: static list connections;
member
public: ProxyServerConnection conn;
member
public: static list hostaddr_cache;
member
public: integer start;
member
public: integer end;
end_class
end_class
class XmlUtility
member
public: static list init;
member
public: static string ctrl_a;
member
public: static string dtd_base;
member
public: static string xsl_base;
member
public: static string content_validation_base;
member
public: static list dtd_cache;
member
public: static list xsl_cache;
member
public: list isLike(string value);
body
{
	var integer len, ch1, ch2;
	len = al_strlen(value);
	if (len > 2) {
	} else {
		return null;
	}
	ch1 = al_get_char(value, 0);
	ch2 = al_get_char(value, len - 1);
	if (ch1 == '%' && ch2 == '%') {
		return al_substr(value, 1, len - 1);
	} else {
		return null;
	}
}
end_body
member
public: void skip_optional();
body
{
}
end_body
member
public: void skip_choice();
body
{
}
end_body
member
public: void skip_case();
body
{
}
end_body
member
public: void skip_all_opt();
body
{
}
end_body
member
public: list content_validate;
member
public: string validation_errors;
member
public: static list content_validation_report;
class XmlDataRetriver
member
public: void create(list tree);
body
{
	body_tree = tree;
}
end_body
member
public: list tag_tree;
member
public: list body_tree;
member
public: list itr;
member
public: string tag;
member
public: XmlDataRetriver getItr(string xpath);
body
{
	var list body_tree2, tag_tree2, tags, itr2;
	var string tag2;
	tag_tree2 = tag_tree;
	body_tree2 = body_tree;
	tags = al_str_misc("split", xpath, '/');
	itr2 = al_dst_itr(tags);
	loop {
		if (tag2 = al_next(itr2)) {
		} else {
			return null;
		}
		if (al_next(itr2)) {
			al_prev(itr2);
		} else {
			break;
		}
		if (tag_tree2 = al_dst_node(body_tree2, tag2)) {
		} else {
			return null;
		}
		if (body_tree2 = al_dst_node(tag_tree2, "!body")) {
		} else {
			return null;
		}
	}
	var XmlDataRetriver obj;
	obj = new XmlDataRetriver;
	obj.itr = al_dst_itr(body_tree2);
	obj.tag = tag2;
	return obj;
}
end_body
member
public: XmlDataRetriver getNext();
body
{
	var list tag_tree2, body_tree2;
	if (tag_tree2 = al_next_a(itr, tag)) {
	} else {
		return null;
	}
	if (body_tree2 = al_dst_node(tag_tree2, "!body")) {
	} else {
		return null;
	}
	var XmlDataRetriver obj;
	obj = new XmlDataRetriver;
	obj.tag_tree = tag_tree2;
	obj.body_tree = body_tree2;
	obj.itr = itr;
	obj.tag = tag;
	return obj;
}
end_body
member
public: string getValue(string xpath);
body
{
	var list body_tree2, tag_tree2, tags, itr2, param;
	var string tag2, text;
	tag_tree2 = tag_tree;
	body_tree2 = body_tree;
	tags = al_str_misc("split", xpath, '/');
	itr2 = al_dst_itr(tags);
	loop {
		if (tag2 = al_next(itr2)) {
		} else {
			return null;
		}
		if (al_next(itr2)) {
			al_prev(itr2);
		} else {
			break;
		}
		if (tag_tree2 = al_dst_node(body_tree2, tag2)) {
		} else {
			return null;
		}
		if (body_tree2 = al_dst_node(tag_tree2, "!body")) {
		} else {
			return null;
		}
	}
	if (al_strlen(tag2) > 0 && al_get_char(tag2, 0) == '@') {
		tag2 = al_substr(tag2, 1, al_strlen(tag2));
		if (param = al_dst_node(tag_tree2, tag2)) {
			text = param.head;
			return text == "" ? null : text;
		} else {
			return null;
		}
	} else {
		if (tag_tree2 = al_dst_node(body_tree2, tag2)) {
		} else {
			return null;
		}
		if (body_tree2 = al_dst_node(tag_tree2, "!body")) {
		} else {
			return null;
		}
		text = al_dst_node(body_tree2, "!text");
		return text == "" ? null : text;
	}
}
end_body
end_class
end_class
class FileUtility
member
public: static string tempFile();
body
{
	var string platform, dir;
	platform = al_misc("platform", null, null);
	if (platform == "linux") {
		dir = "/tmp";
	} else {
	}
	if (platform == "windows") {
		dir = al_misc("get_env", "TEMP", null);
	} else {
	}
	return al_file_manip("tmp_file", dir, "al");
}
end_body
member
public: static list readBinary(string filename);
body
{
	var integer size;
	var file in;
	var list buffer;
	if (al_file_manip("does_exist", filename, null)) {
	} else {
		var AlException ex;
		ex = new AlException;
		ex.msg = "file: '" + (string)filename + "' not found";
		throw ex;
	}
	if (filename && size = al_file_manip("get_size", filename, null)) {
	} else {
		var AlException ex;
		ex = new AlException;
		ex.msg = "file: can't get file size of '" + (string)filename + "'";
		throw ex;
	}
	if (in = al_file_open(filename, "rb")) {
	} else {
		var AlException ex;
		ex = new AlException;
		ex.msg = "file: can't open read file '" + (string)filename + "'";
		throw ex;
	}
	buffer = al_misc("binary", size, null);
	if (al_file_read(in, al_list3(buffer, 0, size))) {
		var AlException ex;
		ex = new AlException;
		ex.msg = "file: fail to read '" + (string)filename + "'";
		throw ex;
	} else {
	}
	return buffer;
}
end_body
member
public: static string readString(string filename);
body
{
	var list buffer;
	var integer size;
	var string str;
	buffer = readBinary(filename);
	size = al_misc("binary_size", buffer, null);
	str = al_misc("binary_to_string", al_list3(buffer, 0, size), null);
	return str;
}
end_body
member
public: static void writeBinary(string filename, list bin);
body
{
	var integer size;
	size = al_misc("binary_size", bin, null);
	writeBinary(filename, bin, 0, size);
}
end_body
member
public: static void writeBinary(string filename, list bin, integer from, integer size);
body
{
	var file out;
	if (out = al_file_open(filename, "wb")) {
	} else {
		var AlException ex;
		ex = new AlException;
		ex.msg = "file: can't open write file '" + (string)filename + "'";
		throw ex;
	}
	if (al_file_write(out, al_list3(bin, from, size), null)) {
		var AlException ex;
		ex = new AlException;
		ex.msg = "file: fail to write '" + (string)filename + "'";
		throw ex;
	} else {
	}
}
end_body
member
public: static void writeBinary(string filename, string str);
body
{
	var integer size;
	var list bin;
	size = al_strlen(str);
	bin = al_misc("binary", size, null);
	al_misc("binary_copy", al_list2(bin, 0), str);
	writeBinary(filename, bin, 0, size);
}
end_body
member
public: static void appendBinary(string filename, list bin);
body
{
	var integer size;
	size = al_misc("binary_size", bin, null);
	appendBinary(filename, bin, 0, size);
}
end_body
member
public: static void appendBinary(string filename, list bin, integer from, integer size);
body
{
	var file out;
	if (out = al_file_open(filename, "ab")) {
	} else {
		var AlException ex;
		ex = new AlException;
		ex.msg = "file: can't open write file '" + (string)filename + "'";
		throw ex;
	}
	if (al_file_write(out, al_list3(bin, from, size), null)) {
		var AlException ex;
		ex = new AlException;
		ex.msg = "file: fail to write '" + (string)filename + "'";
		throw ex;
	} else {
	}
}
end_body
member
public: static void appendBinary(string filename, string str);
body
{
	var integer size;
	var list bin;
	size = al_strlen(str);
	bin = al_misc("binary", size, null);
	al_misc("binary_copy", al_list2(bin, 0), str);
	appendBinary(filename, bin, 0, size);
}
end_body
member
public: static void writeString(string filename, string str);
body
{
	var file out;
	if (out = al_file_open(filename, "w")) {
	} else {
		var AlException ex;
		ex = new AlException;
		ex.msg = "file: can't open write file '" + (string)filename + "'";
		throw ex;
	}
	if (al_file_write(out, "string", str)) {
		var AlException ex;
		ex = new AlException;
		ex.msg = "file: fail to write '" + (string)filename + "'";
		throw ex;
	} else {
	}
}
end_body
member
public: static void appendString(string filename, string str);
body
{
	var file out;
	if (out = al_file_open(filename, "a")) {
	} else {
		var AlException ex;
		ex = new AlException;
		ex.msg = "file: can't open write file '" + (string)filename + "'";
		throw ex;
	}
	if (al_file_write(out, "string", str)) {
		var AlException ex;
		ex = new AlException;
		ex.msg = "file: fail to write '" + (string)filename + "'";
		throw ex;
	} else {
	}
}
end_body
member
public: static list readGraphData(string filename);
body
{
	if (al_file_manip("does_exist", filename, null)) {
	} else {
		return null;
	}
	var list data;
	var file in;
	if (in = al_file_open(filename, "r")) {
	} else {
		var AlException ex;
		ex = new AlException;
		ex.msg = "file: can't open read file '" + (string)filename + "'";
		throw ex;
	}
	if (data = al_file_read(in, "graph")) {
	} else {
		var AlException ex;
		ex = new AlException;
		ex.msg = "file: fail to read graph data from '" + (string)filename + "'";
		throw ex;
	}
	return data;
}
end_body
member
public: static void writeGraphData(string filename, list data);
body
{
	var file out;
	if (out = al_file_open(filename, "w")) {
	} else {
		var AlException ex;
		ex = new AlException;
		ex.msg = "file: can't open write file '" + (string)filename + "'";
		throw ex;
	}
	if (al_file_write(out, "graph", data)) {
		var AlException ex;
		ex = new AlException;
		ex.msg = "file: fail to write graph data '" + (string)filename + "'";
		throw ex;
	} else {
	}
}
end_body
end_class
class Context
member
public: static string genTimeStamp();
body
{
	return genTimeStamp(0);
}
end_body
member
public: static string genTimeStamp(integer diff);
body
{
	var list time;
	time = al_misc("get_time", null, null);
	time = time + diff;
	time = al_misc("get_localtime", time, null);
	time = al_misc("format_time", time, "yyyyMMdd'-'HHmmss");
	return time;
}
end_body
end_class
end_class
$END_BODY
