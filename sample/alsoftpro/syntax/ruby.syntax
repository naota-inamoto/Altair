
newline_is_token ;

split_ident ;
indent+ "  " "{" ;
-indent "}" ;
-indent "end" ;
indent+ "  " <module:1> ;
post space   <module:1> ;
indent+ "  " <class:1> ;
post space   <class:1> ;
indent+ "  " <class2:1> ;
post space   <class2:1> ;
indent+ "  " <method:1> ;
post space   <method:1> ;
indent+ "  " <method2:1> ;
post space   <method2:1> ;
indent+ "  " <begin:1> ;
post space   <begin:1> ;
indent+ "  " <while:1> ;
post space   <while:1> ;
indent+ "  " <until:1> ;
post space   <until:1> ;
indent+ "  " <unless:1> ;
post space   <unless:1> ;
-indent      <unless_else:1> ;
indent+ "  " <unless_else:1> ;
post space   <unless_else:1> ;
indent+ "  " <for:1> ;
post space   <for:1> ;
pre  space   <for:3> ;
post space   <for:3> ;
indent+ "  " <loop:1> ;
post space   <loop:1> ;
indent+ "  " <if:1> ;
post space   <if:1> ;
-indent      <elsif:1> ;
indent+ "  " <elsif:1> ;
post space   <elsif:1> ;
-indent      <if_else:1> ;
indent+ "  " <if_else:1> ;
post space   <if_else:1> ;
indent+ "  " <case:1> ;
post space   <case:1> ;
-indent      <case_when:1> ;
indent+ "  " <case_when:1> ;
post space   <case_when:1> ;
-indent      <case_else:1> ;
indent+ "  " <case_else:1> ;
post space   <case_else:1> ;
indent+ "  " <blk2:1> ;
indent+ "  " <blk3:2> ;

post space <s_if:2> ;
post space <s_while:2> ;
post space <s_unless:2> ;
post space <s_until:2> ;

pre  space   <then:1> ;
post space   <then:1> ;
post space   <then_opt:1> ;
pre  space   <do:1> ;
post space   <do:1> ;
post space   <do_opt:1> ;

pre  space <e_or_n:1> ;
post space <e_or_n:1> ;
pre  space <e_and_n:1> ;
post space <e_and_n:1> ;
post space <exp_not_1:1> ;
pre  space <e_asgn_1:2> ;
post space <e_asgn_1:2> ;
pre  space <a_oror_n:1> ;
post space <a_oror_n:1> ;
pre  space <a_andand_n:1> ;
post space <a_andand_n:1> ;
pre  space <a_asgn_n:2> ;
post space <a_asgn_n:2> ;
pre  space <a_cond_1:1> ;
post space <a_cond_1:1> ;
pre  space <a_cond_1:3> ;
post space <a_cond_1:3> ;
pre  space <a_range_1:1> ;
post space <a_range_1:1> ;
pre  space <a_eq_1:1> ;
post space <a_eq_1:1> ;
pre  space <a_cmp_1:1> ;
post space <a_cmp_1:1> ;
pre  space <a_or_n:1> ;
post space <a_or_n:1> ;
pre  space <a_xor_n:1> ;
post space <a_xor_n:1> ;
pre  space <a_and_n:1> ;
post space <a_and_n:1> ;
pre  space <a_sft_n:1> ;
post space <a_sft_n:1> ;
pre  space <a_add_n:1> ;
post space <a_add_n:1> ;
pre  space <a_mul_n:1> ;
post space <a_mul_n:1> ;
pre  space <a_spcl_1:1> ;
post space <a_spcl_1:1> ;

pre  space <s_if:1> ;
pre  space <s_while:1> ;
pre  space <s_unless:1> ;
pre  space <s_until:1> ;
pre  space <s_rescue:1> ;

pre  space <p1:1> ;
pre  space <p4:1> ;
post space <comma:1> ;
pre  space <blk1:1> ;
post space <blk1:1> ;

post space <alias:1> ;
post space <alias:2> ;

<program> = program <stats> EOF ;

<stats> = stats { stats_s { stats_t1 <term> }? <stat> }* { stats_t2 <term> }? ;

<term> =  term1 ";" { nl1 <nl> }* | term2 { nl2 <nl> }+ ;

<stat> = stat <stat2> {
           s_if     !$ "if"     { if_nl     <nl> }* <exp> |
           s_while  !$ "while"  { while_nl  <nl> }* <exp> |
           s_unless !$ "unless" { unless_nl <nl> }* <exp> |
           s_until  !$ "until"  { until_nl  <nl> }* <exp>
         }?
         {
           s_rescue !$ "rescue" { rescue_nl <nl> }* <exp>
         }? ;

<stat2> =
          include "include" <cls_name> |

          module "module" <ident> <stats> "end" |

          alias "alias" <aname> <aname> |
          undef "undef" { undef_name <aname> }+ |
          initialize "BEGIN" "{" <stats> "}" |
          finalize   "END"   "{" <stats> "}" |

          exp <exp> ;

<name> = n_i <name3> | n_inc "+@" | n_dec "-@" |
         n_asgn <op_asgn> | n_two <op_two> | n_one <op_one> |
         n_ary_asgn "[]=" | n_ary_ref "[]" ;

<name2> = n2_i <ident> { n2_se '!' !'=' !'~' | n2_tf '?' }? ;

<name3> = n3_i {
               n3_ident <ident>   |
               n3_class  "class"  |
               n3_do     "do"
           }
           { n3_se '!' !'=' !'~' | n3_tf '?' }? ;

<name4> = n4_i {
               n4_ident <ident>   |
               n4_class  "class"  |
               n4_do     "do"
           }
           { n4_se '!' !'=' !'~' | n4_tf '?' } ;

<adcl> = adcl_1 "(" { adcl_1_ls <adcl_ls> }? ")" | adcl_2 <term> | adcl_3 { adcl_3_ls <adcl_ls> }? <term> ;

<adcl_ls> = adcl_ls <ident> { d_a_1 "=" { adcl_nl1 <nl> }* <a_cond> }?
                 { adcl_ls_n <comma> <ident> { d_a_n "=" { adcl_nl2 <nl> }* <a_cond> }? }*
                 { adcl_ls_tail_expnd <comma> "*" <ident> }?
                 { adcl_ls_tail_prc_blk <comma> "&" <ident> }? |
            adcl_ls_expnd "*" <ident> { adcl_ls_expnd_prc_blk <comma> "&" <ident> }? |
            adcl_ls_prc_blk "&" <ident> ;

<rscu> = rscu { rscu_n "rescue" { rscu_nl <nl> }* { rscu_args <args> }? { rscu_val "=>" <slhs> }?
                   { rscu_then <then> }? <stats> }* { rscu_else "else" <stats> }? ;
<ensr> = ensr "ensure" { ensr_nl <nl> }* <stats> ;

<then> = then "then" { then_nl1 <nl> }* | then_t <term> { then_opt "then" { then_nl2 <nl> }* }? ;
<do>   = do   "do"   { do_nl1   <nl> }* | do_t   <term> { do_opt   "do"   { do_nl2   <nl> }* }? ;

<a_ls> = a_ls <args>
            {
                a_ls_prc_blk <comma> "&" <arg> |
                a_ls_comma2 <comma> 
            }? |
         a_ls_prc_blk2 "&" <arg> ;

<exp> = e_or <exp_and> { e_or_n "or" { e_or_nl <nl> }* <exp_and> }* ;
<exp_and> = e_and <exp_not> { e_and_n "and" { e_and_nl <nl> }* <exp_not> }* ;
<exp_not> = e_not { exp_not_1 "not" }? <exp_asgn> ;
<exp_asgn> = e_asgn { e_asgn_1 <mlhs> "=" !'=' !'>' !'~' { e_asgn_nl <nl> }*  }+ <mrhs> |
             e_arg <arg>  ;

<op_asgn> = asgn "=" !'=' !'>' !'~' | add_asgn "+=" | sub_asgn "-=" |
            mul_asgn "*="  | div_asgn "/="  | mod_asgn "%="  | spcl_asgn "**=" |
            and_asgn "&=" | or_asgn "|=" | xor_asgn "^=" | sl_asgn "<<=" | sr_asgn ">>=" |
            andand_asgn "&&=" | oror_asgn "||=" ;

<op_two> = oror "||" | andand "&&" | range_1 "..."  | range_2 ".." |
           sl "<<" !"-" | sr ">>"  | or "|"  | xor "^"  | and "&" | spcl "**" |
           add "+" | sub "-" | mul "*" | div "/" | mod "%"  |
           op_eq <op_eq> | regex_1 "=~" | regex_2 "!~" | op_cmp <op_cmp> ;
<op_eq>  = cmp "<=>" | ne "!=" | spcl_eq "==="  | eq "==" | regexp_1 "=~" | regexp_2 "!~";
<op_cmp> = ge ">=" | gt ">" | le "<=" | lt "<" ;
<op_one> = op_unary_add "+" | op_unary_sub "-" | op_notnot "!" | op_not "~" ;

<args> = args <arg> { assoc "=>" <arg> }?
         { args_n <comma> <arg> { assoc_n "=>" <arg> }? }*
         { args_expnd <comma> "*" <arg> }? |
         args_expnd2 "*" <arg>;

<arg> = arg <a_oror> ;
<a_oror> = a_oror <a_andand> { a_oror_n "||" { a_oror_nl <nl> }* <a_andand> }* ;
<a_andand> = a_andand <a_asgn> { a_andand_n "&&" { a_andand_nl <nl> }* <a_asgn> }* ;
<a_asgn> = a_asgn_1 { a_asgn_n <lhs> <op_asgn> { a_asgn_nl <nl> }* }+ <a_cond> |
           a_asgn <a_cond> ;
<a_cond> = a_cond <a_range> { a_cond_1 "?" <a_cond> ":" <a_cond> }? ;
<a_range> = a_range <a_eq> { a_range_1 { ra_1 "..." | ra_2 ".." } <a_eq> }? ;
<a_eq> = a_eq <a_cmp> { a_eq_1 <op_eq> <a_cmp> }? ;
<a_cmp> = a_cmp <a_or>  { a_cmp_1 <op_cmp> <a_or> }? ;
<a_or>  = a_or  <a_xor> { a_or_n  "|" { a_or_nl <nl> }* <a_xor> }* ;
<a_xor> = a_xor <a_and> { a_xor_n "^" <a_and> }* ;
<a_and> = a_and <a_sft> { a_and_n "&" <a_sft> }* ;
<a_sft> = a_sft <a_add> { a_sft_n { a_sl "<<" !"-" | a_sr ">>" } { a_sft_nl <nl> }* <a_add> }* ;
<a_add> = a_add <a_mul> { a_add_n { add_add "+" | add_sub "-"  } { a_add_nl <nl> }* <a_mul> }* ;
<a_mul> = a_mul <a_spcl> { a_mul_n { mul_mul "*" | mul_div "/" | mul_mod "%" } <a_spcl> }* ;
<a_spcl> = a_spcl <unary> { a_spcl_1 "**" <unary> }? ;
<unary> = unary_add { u_sub "-" | u_add "+"  | u_notnot "!" | u_not "~" }? <prim> ;

<prim> = break "break" | next "next" | redo "redo" | retry "retry" |
         cmd_output <cmd_output> |
         p_not "!" <prim> |

         prim2 {
           p_func_1 <name2>
             {
                 p1 !'::' !'(' !")" !'[' !"]" !'{' !"}" !"|" !"^" !"&" !"." !"+" !"-" !"*" !"/" !"%" !"!" !"=" !"<<=" !"<=" !"<< " !">"
                     !"if" !"unless" !"while" !"until" !"rescue" !"{" !$ $define(itr) <a_ls> $undef(itr) { p1_blk <blk_itr> }? |

                 p2 $ifndef(itr) <blk_itr> |

                 p3 "(" { p3_nl1 <nl> }* { p1_a_ls <a_ls> }? { p3_nl2 <nl> }* ")" { p3_blk $ifndef(itr) <blk_itr> }?
             } |

           p_func_2 <name4> |

           root_cls "::" <ident>   |
           variable <var>          |
           literal <literal>       |
           braket1 "(" <arg> ")"   |
           braket2 "(" <stats> ")" |

           prim2_class   <class>   |
           prim2_class2  <class2>  |
           prim2_method  <method>  |
           prim2_method2 <method2> |
           prim2_begin   <begin>   |
           prim2_while   <while>   |
           prim2_until   <until>   |
           prim2_if      <if>      |
           prim2_unless  <unless>  |
           prim2_for     <for>     |
           prim2_loop    <loop>    |
           prim2_loop2   <loop2>   |
           prim2_case    <case>    |
           prim2_array   <array>   |
           prim2_hash    <hash>
         }
         {
           p_ary "[" { pa_nl1 <nl> }* { p_ary_a_ls <a_ls> }?  { pa_nl2 <nl> }* "]" |
           p_mem <member> 
         }* ;

<class> = class "class" <ident> { super_cls "<" <prim> }? <stats> "end" ;

<class2> = class2 "class" "<<" <exp> <stats> <rscu> { cls_ensr <ensr> }? "end" ;

<method> = method "def" <name> { setter "=" }? <adcl> <stats> <rscu> { def_ensr <ensr> }? "end" ;

<method2> = method2 "def" { obj_m_v <var> | obj_m_e "(" <exp> ")" } { obj_m "." | cls_m "::" }
              <name> { setter2 "=" }? <adcl> <stats> <rscu> { def2_ensr <ensr> }? "end" ;

<begin> = begin "begin" <stats> <rscu> { begin_ensr <ensr> }? "end" ;

<while> = while "while" $define(do) <exp> $undef(do) <do> <stats> "end" ;

<until> = until "until" $define(do) <exp> $undef(do) <do> <stats> "end" ;

<unless> = unless "unless" <exp> <then> <stats> { unless_else "else" <stats> }? "end" ;

<for> = for "for" <lhs> "in" $define(do) <exp> $undef(do) <do> <stats> "end" ;

<loop> = loop "loop" <do> <stats> "end" ;

<loop2> = loop2 "loop" "{" <stats> "}" ;

<if> = if "if" <exp> <then> { if_then_stats <stats> }?
                { elsif "elsif" <exp> <then> <stats> }*
                { if_else "else" <stats> }? "end" ;

<case> = case "case" { case_exp <exp> }? { case_nl <nl> }+
                { case_when "when" <args> <then> <stats> }+
                { case_else "else" <stats> }? "end" ;

<array> = array "[" { array_nl1 <nl> }*
               { array_v <args> { array_opt <comma> }? }?
               { array_nl2 <nl> }* "]" ;

<hash> =  hash  "{" { hash_nl1 <nl> }*
               { hash_v  <args> { hash_opt  <comma> }? }?
               { hash_nl2 <nl> }* "}" ;

<cls_name>  = cls_nm  <ident> { cls_nm_n  "::" <ident> }* ;

<member> = member { p_cls "::" | p_obj "." } { mem_nl <nl> }* <name3>
              {
                p4 !'::' !'(' !")" !'[' !"]" !'{' !"}" !"|" !"^" !"&" !"." !"+" !"-" !"*" !"/" !"%" !"!" !"=" !"<<=" !"<=" !"<< " !">"
                  !"if" !"unless" !"while" !"until" !"rescue" !"{" !$ $define(itr) <a_ls> $undef(itr) { p4_blk <blk_itr> }? |

                p5 $ifndef(itr) <blk_itr> |

                p6 "(" { p6_nl1 <nl> }* { p6_a_ls <a_ls> }? { p6_nl2 <nl> }* ")" { p6_blk $ifndef(itr) <blk_itr> }?
              }? ;

<blk_itr> = blk1 "{" { blk1_v "|" <lhs> "|" }? <stats> "}" |
            blk2 <do> "|" { blk2_v <lhs> }? "|" <stats> "end" |
            blk3 $ifndef(do) "do" <stats> "end" ;

<lhs> = lhs_m <mlhs> | lhs_s <slhs> ;

<slhs> = slhs {
           slhs_func <name2> "(" { slhs_a_ls <a_ls> }? ")" |
           slhs_root_cls "::" <ident>   |
           slhs_variable <var>          |
           slhs_braket1 "(" <arg> ")"   |
           slhs_braket2 "(" <stats> ")"
         }
         {
           slhs_ary "[" { slhs_ary_a_ls <a_ls> }? "]" |
           slhs_mem <member> 
         }* ;

<mlhs> = mlhs <mlhs_item> { mlhs_n <comma> <mlhs_item> }*
             { mlhs_tail_expnd <comma> "*" <slhs> | mlhs_opt <comma> }? |
         mlhs_expnd "*" <slhs> |
         mlhs_mlhs "(" <mlhs> ")" ;

<mlhs_item> = mlhs_item_s <slhs> | mlhs_item_m "(" <mlhs> ")" ;

<mrhs> = mrhs <args> ;

<comma> = comma "," { comma_nl <nl> }* ;

<literal> = l_str <string> | l_hex  <hex> | l_bin <bin> | l_octed  <octed> | l_real <real> !"." | l_int  <integer> |
            l_char <char> | l_ctrl  <ctrl> | l_meta <meta> | l_meta_ctrl <meta_ctrl> |
            l_wd_1 <words_1> | l_wd_2 <words_2> | l_wd_3 <words_3> | l_wd_4 <words_4> | l_wd_5 <words_5> |
            l_rgxp <regexp> | l_sym  <symbol> | l_hd   <here_doc> ;

<string> = d_q_str <d_string> | s_q_str <s_string> ;

<var> = this_v "@"  <ident> | cls_v  "@@" <ident> |
        glob_v <global> |
        ident    <ident> ;

<symbol> = sym_func  ":" !' ' <name> { sym_func_setter "=" }?|
           sym_thisv ":" !' ' "@"  <ident> |
           sym_clsv  ":" !' ' "@@" <ident> |
           sym_globv ":" !' ' <global> ;

<global> = global "$" <ident> | system <system> ;

<here_doc> = here_dq  "<<" { hddq_opt "-" }? <d_string> $line $until $2 $redirect $3 |
             here_sq  "<<" { hdsq_opt "-" }? <s_string> $line $until $2 $redirect $3 |
             here_bq  "<<" { hdbq_opt "-" }? <b_string> $line $until $2 $redirect $3 |
             here_str "<<" { hs_opt "-" }?   <ident2>   $line $until $2 $redirect $3 ;

<cmd_output> = cmd_o_1 "`"  <stats> "`" |
               cmd_o_2 "%{" <stats> "}" ;

<ident> = ident_e "#" "{" <prim> "}" | ident_s <ident2> ;

<aname>      = aname_1 <aname_1> | aname_2 <aname_2> ;
<aname_1>    = an_module "module" | an_class "class" | an_def "def"| an_rescue "rescue" |
               an_ensure "ensure" | an_begin "begin" | an_end "end" | an_loop "loop" |
               an_do "do" | an_while "while" | an_for "for" | an_in "in" |
               an_next "next" | an_break "break" | an_retry "retry" | an_redo "redo" |
               an_unless "unless" | an_until "until" | an_if "if" | an_then "then" |
               an_elsif "elsif" | an_else "else" | an_when "when" | an_case "case" |
               an_and "and" | an_or "or" | an_not "not" | an_alias "alias" | an_undef "undef" ;

<reserve> = reserve BEGIN    END      module   class    def      rescue   ensure   begin    end
                    loop     do       while    until    for      in       next     break    retry    redo
                    unless   if       then     elsif    else     when     case
                    and      or       not      alias    undef    ;

<aname_2>    = regex [A-Za-z0-9_\+\-\*\/%&\|\^<>=~!\?\[\]@:]+ string ;

<ident2>     = regex [A-Za-z_][A-Za-z0-9_]* string ;
<nl>         = regex $ special ;

<integer>    = regex \-?(0|[1-9][0-9]*) string ;
<real>       = regex \-?([0-9]+\.[0-9]+)((e|E)(\+|\-)?[0-9]+)? string ;
<hex>        = regex 0x[0-9a-fA-F]+ string ;
<bin>        = regex 0b[01]+ string ;
<octed>      = regex 0o?[0-7]+ string ;
<char>       = regex \?[^\ ] string ;
<ctrl>       = regex \?\\C\-. string ;
<meta>       = regex \?\\M\-. string ;
<meta_ctrl>  = regex \?\\M\-\\C\-. string ;

<d_string>   = regex "([^\\"#]|\\.|#[^\\"\{]|#\{[^\}\n]*\})*#?" quote_string ;
<s_string>   = regex '([^\\']|\\.)*'                            quote_string ;
<b_string>   = regex `([^\\`]|\\.)*`                            quote_string ;

<words_1>    = regex %\{[^\}]*\}?        string ;
<words_2>    = regex %\[[^\]]*\]?        string ;
<words_3>    = regex %[QqzwWs]\([^\)]*\) string ;
<words_4>    = regex %[QqzwWs]\{[^\}]*\} string ;
<words_5>    = regex %r\{([^\{\}]|\{[^\}]*\})*\}[imxoesun]* string ;
<regexp>     = regex /(\\/|[^/\n])*/[imxoesun]* string ;

<system>     = regex \$\-?. string ;

<comment_1>  = comment            #([^\{\n][^\n]*)?\n ;
<comment_2>  = comment            #\{[^\}\n]*\n ;
<comment_3>  = comment_begin_end "=begin" "=end" ;

