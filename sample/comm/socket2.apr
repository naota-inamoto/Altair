$END_LIB
TEXT
AlObject
class TP
class AcceptCB
end_class
class AcceptCB2
end_class
class RecvCB
end_class
end_class
$END_CLASS
TEXT
AlObject
class TP
member
public: static void init_server();
member
public: static void init_client();
member
public: static void tcp_server();
member
public: static void tcp_client();
member
public: static void udp_server();
member
public: static void udp_client();
member
public: static void tcp_server2();
member
public: static void tcp_client2();
member
public: static void udp_server2();
member
public: static void udp_client2();
member
public: static string hostname;
member
public: static integer hostaddr;
member
public: static integer port;
member
public: static integer ss_id;
member
public: static integer s_id;
member
public: static string msg;
member
public: static AcceptCB accept_cb;
member
public: static RecvCB recv_cb;
class AcceptCB
member
public: void accepted();
end_class
class AcceptCB2
member
public: void accepted();
end_class
class RecvCB
member
public: void received();
member
public: list binary;
end_class
end_class
$END_MEMBER
TEXT
AlObject
class TP
member
public: static void init_server();
body
{
	port = 2041;
	msg = "hello!";
}
end_body
member
public: static void init_client();
body
{
	hostname = "localhost";
	port = 2041;
	hostaddr = al_socket("gethostbyname", hostname, null, null);
	if (hostaddr == null) {
		al_print("fail to get host ip address(" + hostname + ").\n");
	} else {
	}
	msg = "hello!";
}
end_body
member
public: static void tcp_server();
body
{
	init_server();
	var list r;
	ss_id = al_socket("socket", null, null, null);
	if (ss_id == null) {
		al_print("fail to create socket.\n");
	} else {
	}
	r = al_socket("bind", ss_id, al_list2(0, port), null);
	if (r) {
		al_print("fail to bind.\n");
		al_print("error = " + (string)al_socket("get_last_error", ss_id, null, null) + "\n");
		al_socket("close", ss_id, null, null);
		return;
	} else {
	}
	r = al_socket("listen", ss_id, null, null);
	if (r) {
		al_print("fail to listen.\n");
		al_print("error = " + (string)al_socket("get_last_error", ss_id, null, null) + "\n");
		al_socket("close", ss_id, null, null);
		return;
	} else {
	}
	var integer hwnd, wnd_msg;
	var list cb_obj;
	hwnd = al_wnd_message(null, "hwnd", null, null);
	wnd_msg = al_wnd_message(null, "register_msg", "ACCEPT", null);
	accept_cb = new AcceptCB;
	cb_obj = al_list3(al_root_class(), accept_cb, AcceptCB::accepted);
	al_wnd_message(null, "msg_callback", wnd_msg, cb_obj);
	al_socket("accept", ss_id, al_list2(hwnd, wnd_msg), null);
}
end_body
member
public: static void tcp_client();
body
{
	init_client();
	var list r, binary;
	s_id = al_socket("socket", null, null, null);
	if (s_id == null) {
		al_print("fail to create socket.\n");
	} else {
	}
	r = al_socket("connect", s_id, al_list2(hostaddr, port), null);
	if (r) {
		al_print("fail to connect.\n");
		al_print("error = " + (string)al_socket("get_last_error", s_id, null, null) + "\n");
		al_socket("close", s_id, null, null);
		return;
	} else {
	}
	binary = al_misc("binary", 1024, null);
	al_misc("binary_copy", al_list2(binary, 0), msg);
	r = al_socket("send", s_id, al_list3(binary, 0, al_strlen(msg)), null);
	if (r) {
		al_print("fail to send.\n");
		al_print("error = " + (string)al_socket("get_last_error", s_id, null, null) + "\n");
		al_socket("close", s_id, null, null);
		return;
	} else {
	}
	al_socket("close", s_id, null, null);
}
end_body
member
public: static void udp_server();
body
{
	init_server();
	var list r, binary;
	s_id = al_socket("dgram_socket", null, null, null);
	if (s_id == null) {
		al_print("fail to create socket.\n");
	} else {
	}
	r = al_socket("bind", s_id, al_list2(0, port), null);
	if (r) {
		al_print("fail to bind.\n");
		al_print("error = " + (string)al_socket("get_last_error", s_id, null, null) + "\n");
		al_socket("close", s_id, null, null);
		return;
	} else {
	}
	var integer hwnd, wnd_msg;
	var list cb_obj;
	hwnd = al_wnd_message(null, "hwnd", null, null);
	wnd_msg = al_wnd_message(null, "register_msg", "RECV", null);
	recv_cb = new RecvCB;
	recv_cb.binary = al_misc("binary", 1024, null);
	cb_obj = al_list3(al_root_class(), recv_cb, RecvCB::received);
	al_wnd_message(null, "msg_callback", wnd_msg, cb_obj);
	al_socket("recvfrom", s_id, al_list3(recv_cb.binary, 0, al_strlen(msg)), al_list2(hwnd, wnd_msg));
}
end_body
member
public: static void udp_client();
body
{
	init_client();
	var list r, binary;
	var integer bcast_addr;
	bcast_addr = al_socket("bcast_address", null, null, null);
	s_id = al_socket("dgram_socket", null, null, null);
	if (s_id == null) {
		al_print("fail to create socket.\n");
	} else {
	}
	r = al_socket("setsockopt", s_id, "SO_BROADCAST", 1);
	if (r) {
		al_print("fail to setsockopt.\n");
		al_print("error = " + (string)al_socket("get_last_error", s_id, null, null) + "\n");
		al_socket("close", s_id, null, null);
		return;
	} else {
	}
	binary = al_misc("binary", 1024, null);
	al_misc("binary_copy", al_list2(binary, 0), msg);
	r = al_socket("sendto", s_id, al_list2(bcast_addr, port), al_list3(binary, 0, al_strlen(msg)));
	if (r) {
		al_print("fail to sendto.\n");
		al_print("error = " + (string)al_socket("get_last_error", s_id, null, null) + "\n");
		al_socket("close", s_id, null, null);
		return;
	} else {
	}
	al_socket("close", s_id, null, null);
}
end_body
member
public: static void tcp_server2();
body
{
	init_server();
	var list r;
	ss_id = al_socket("socket", null, null, null);
	if (ss_id == null) {
		al_print("fail to create socket.\n");
	} else {
	}
	r = al_socket("bind", ss_id, al_list2(0, port), null);
	if (r) {
		al_print("fail to bind.\n");
		al_print("error = " + (string)al_socket("get_last_error", ss_id, null, null) + "\n");
		al_socket("close", ss_id, null, null);
		return;
	} else {
	}
	r = al_socket("listen", ss_id, null, null);
	if (r) {
		al_print("fail to listen.\n");
		al_print("error = " + (string)al_socket("get_last_error", ss_id, null, null) + "\n");
		al_socket("close", ss_id, null, null);
		return;
	} else {
	}
	var integer hwnd, wnd_msg;
	var list cb_obj;
	hwnd = al_wnd_message(null, "hwnd", null, null);
	wnd_msg = al_wnd_message(null, "register_msg", "ACCEPT2", null);
	accept_cb = new AcceptCB2;
	cb_obj = al_list3(al_root_class(), accept_cb, AcceptCB2::accepted);
	al_wnd_message(null, "msg_callback", wnd_msg, cb_obj);
	al_socket("accept", ss_id, al_list2(hwnd, wnd_msg), null);
}
end_body
member
public: static void tcp_client2();
body
{
	init_client();
	var list r;
	s_id = al_socket("socket", null, null, null);
	if (s_id == null) {
		al_print("fail to create socket.\n");
	} else {
	}
	r = al_socket("connect", s_id, al_list2(hostaddr, port), null);
	if (r) {
		al_print("fail to connect.\n");
		al_print("error = " + (string)al_socket("get_last_error", s_id, null, null) + "\n");
		al_socket("close", s_id, null, null);
		return;
	} else {
	}
	r = al_socket("send", s_id, msg + "\n", null);
	if (r) {
		al_print("fail to send.\n");
		al_print("error = " + (string)al_socket("get_last_error", s_id, null, null) + "\n");
		al_socket("close", s_id, null, null);
		return;
	} else {
	}
	al_socket("close", s_id, null, null);
}
end_body
member
public: static void udp_server2();
body
{
	init_server();
	var list r, binary;
	s_id = al_socket("dgram_socket", null, null, null);
	if (s_id == null) {
		al_print("fail to create socket.\n");
	} else {
	}
	r = al_socket("bind", s_id, al_list2(0, port), null);
	if (r) {
		al_print("fail to bind.\n");
		al_print("error = " + (string)al_socket("get_last_error", s_id, null, null) + "\n");
		al_socket("close", s_id, null, null);
		return;
	} else {
	}
	var integer hwnd, wnd_msg;
	var list cb_obj;
	hwnd = al_wnd_message(null, "hwnd", null, null);
	wnd_msg = al_wnd_message(null, "register_msg", "RECV", null);
	recv_cb = new RecvCB;
	recv_cb.binary = al_misc("binary", 1024, null);
	cb_obj = al_list3(al_root_class(), recv_cb, RecvCB::received);
	al_wnd_message(null, "msg_callback", wnd_msg, cb_obj);
	al_socket("recvfrom", s_id, al_list3(recv_cb.binary, 0, -1024), al_list2(hwnd, wnd_msg));
}
end_body
member
public: static void udp_client2();
body
{
	init_client();
	var list r;
	var integer bcast_addr;
	bcast_addr = al_socket("bcast_address", null, null, null);
	s_id = al_socket("dgram_socket", null, null, null);
	if (s_id == null) {
		al_print("fail to create socket.\n");
	} else {
	}
	r = al_socket("setsockopt", s_id, "SO_BROADCAST", 1);
	if (r) {
		al_print("fail to setsockopt.\n");
		al_print("error = " + (string)al_socket("get_last_error", s_id, null, null) + "\n");
		al_socket("close", s_id, null, null);
		return;
	} else {
	}
	r = al_socket("sendto", s_id, al_list2(bcast_addr, port), msg + "\n");
	if (r) {
		al_print("fail to sendto.\n");
		al_print("error = " + (string)al_socket("get_last_error", s_id, null, null) + "\n");
		al_socket("close", s_id, null, null);
		return;
	} else {
	}
	al_socket("close", s_id, null, null);
}
end_body
member
public: static string hostname;
member
public: static integer hostaddr;
member
public: static integer port;
member
public: static integer ss_id;
member
public: static integer s_id;
member
public: static string msg;
member
public: static AcceptCB accept_cb;
member
public: static RecvCB recv_cb;
class AcceptCB
member
public: void accepted();
body
{
	var integer server_socket_id, socket_id;
	var string recv_msg;
	server_socket_id = al_wnd_message(null, "wParam", null, null);
	socket_id = al_wnd_message(null, "lParam", null, null);
	al_socket("close", server_socket_id, null, null);
	var integer hwnd, wnd_msg;
	var list cb_obj;
	hwnd = al_wnd_message(null, "hwnd", null, null);
	wnd_msg = al_wnd_message(null, "register_msg", "RECV", null);
	recv_cb = new RecvCB;
	recv_cb.binary = al_misc("binary", 1024, null);
	cb_obj = al_list3(al_root_class(), recv_cb, RecvCB::received);
	al_wnd_message(null, "msg_callback", wnd_msg, cb_obj);
	al_socket("recv", socket_id, al_list3(recv_cb.binary, 0, al_strlen(msg)), al_list2(hwnd, wnd_msg));
}
end_body
end_class
class AcceptCB2
member
public: void accepted();
body
{
	var integer server_socket_id, socket_id;
	var string recv_msg;
	server_socket_id = al_wnd_message(null, "wParam", null, null);
	socket_id = al_wnd_message(null, "lParam", null, null);
	al_socket("close", server_socket_id, null, null);
	var integer hwnd, wnd_msg;
	var list cb_obj;
	hwnd = al_wnd_message(null, "hwnd", null, null);
	wnd_msg = al_wnd_message(null, "register_msg", "RECV", null);
	recv_cb = new RecvCB;
	recv_cb.binary = al_misc("binary", 1024, null);
	cb_obj = al_list3(al_root_class(), recv_cb, RecvCB::received);
	al_wnd_message(null, "msg_callback", wnd_msg, cb_obj);
	al_socket("recv", socket_id, al_list3(recv_cb.binary, 0, 1024), al_list3(hwnd, wnd_msg, 1));
}
end_body
end_class
class RecvCB
member
public: void received();
body
{
	var integer socket_id, size;
	var string recv_msg;
	socket_id = al_wnd_message(null, "wParam", null, null);
	size = al_wnd_message(null, "lParam", null, null);
	if (size < 0) {
		al_print("fail to recv.\n");
		al_print("error = " + (string)al_socket("get_last_error", socket_id, null, null) + "\n");
		al_socket("close", socket_id, null, null);
		return;
	} else {
	}
	recv_msg = al_misc("binary_to_string", al_list3(binary, 0, size), null);
	al_print("recv_msg = " + msg + "\n");
	al_socket("close", socket_id, null, null);
}
end_body
member
public: list binary;
end_class
end_class
$END_BODY
